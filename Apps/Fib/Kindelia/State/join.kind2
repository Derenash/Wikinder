#kdl_name = Fib_kdl_sjoi
Apps.Fib.Kindelia.State.join (pos: List Apps.Fib.Pos) (game: Apps.Fib.State) (players: User.Sipher.PatriciaTree) (subj: U120): Maybe (Pair Apps.Fib.State Apps.Fib.Id)
Apps.Fib.Kindelia.State.join List.nil game players subj = Maybe.none
Apps.Fib.Kindelia.State.join (List.cons head tail) (Apps.Fib.State.new map table) players subj = 
  let player = User.Sipher.PatriciaTree.get players subj
  match Maybe player {
    none =>
      let p = Apps.Fib.Map.got map head
      match Pair p {
        new =>
          let map  = p.fst
          let tile = p.snd
          if (U120.is_zero tile) {
            let id      = Apps.Fib.Kindelia.State.join.id (U120.new 0 1024) table
            let map     = Apps.Fib.Map.set map id head
            let player  = Apps.Fib.Player.default (Apps.Fib.Pos.get_x head) (Apps.Fib.Pos.get_y head)
            let table   = Apps.Fib.Table.set table player id
            let state   = Apps.Fib.State.new map table
            Maybe.some (Pair.new state id)
          }
          else {
            Apps.Fib.Kindelia.State.join tail (Apps.Fib.State.new map table) players subj
          }
      }
    some => Maybe.none
  }

#kdl_name = Fib_kdl_sjid
Apps.Fib.Kindelia.State.join.id (id: Apps.Fib.Id) (table: Apps.Fib.Table) : Apps.Fib.Id {
  let entity = Apps.Fib.Table.get table id 
  if U120.is_zero entity { id } else { Apps.Fib.Kindelia.State.join.id (U120.inc id) table }
}