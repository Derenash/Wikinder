#kdl_name = Fib_kdl_sjoi
Apps.Fib.Kindelia.State.join (pos: List Apps.Fib.Pos) (game: Apps.Fib.State) (players: User.Sipher.PatriciaTree) (subj: U120) : Pair Apps.Fib.State (Maybe Apps.Fib.Id)
Apps.Fib.Kindelia.State.join pos (Apps.Fib.State.new map table) players subj = 
  let pos = Apps.Fib.Kindelia.State.join_pos map pos
  match Pair pos {
    new =>
      match Maybe pos.snd {
        none => Pair.new (Apps.Fib.State.new pos.fst table) Maybe.none
        some =>
          let id  = Apps.Fib.Kindelia.State.join.id (U120.new 0 0) table
          match Pair id {
            new =>
              Apps.Fib.Kindelia.State.join.aux id.snd pos.snd.value (Apps.Fib.State.new pos.fst id.fst) players subj
          }
      }
  }




#kdl_name = Fib_kdl_sjia
Apps.Fib.Kindelia.State.join.aux (id: Apps.Fib.Id) (pos: Apps.Fib.Pos) (game: Apps.Fib.State) (players: User.Sipher.PatriciaTree) (subj: U120): Pair Apps.Fib.State (Maybe Apps.Fib.Id)
Apps.Fib.Kindelia.State.join.aux id pos (Apps.Fib.State.new map table) players subj = 
  let player = User.Sipher.PatriciaTree.get players subj
  match Maybe player {
    none =>
      let map_id    = U120.add (U120.new 0 1024) id
      let map       = Apps.Fib.Map.set map (map_id) pos
      let player    = Apps.Fib.Player.default (Apps.Fib.Pos.get_x pos) (Apps.Fib.Pos.get_y pos)
      let table     = Apps.Fib.Table.set table player map_id
      let state     = Apps.Fib.State.new map table
      Pair.new state (Maybe.some id)
    some => Pair.new (Apps.Fib.State.new map table) Maybe.none
  }

#kdl_name = Fib_kdl_sjid
Apps.Fib.Kindelia.State.join.id (id: Apps.Fib.Id) (table: Apps.Fib.Table) : Pair Apps.Fib.Table Apps.Fib.Id {
  let entity = Apps.Fib.Table.got table (U120.add (U120.new 0 1024) id) 
  match Pair entity {
    new =>
      if (U120.is_zero entity.snd) { Pair.new entity.fst id } else { Apps.Fib.Kindelia.State.join.id (U120.inc id) entity.fst }
  }
}