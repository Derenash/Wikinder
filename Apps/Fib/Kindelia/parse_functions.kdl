// Apps.Fib.State.parse (state: (Apps.Fib.State)) : (Apps.Fib.State.Parsed)
fun (Fib_st_parse state) {
  (Fib_st_parse state) =
    let func = (Apps_Fib_fct #0 #0 (Fib_tbl_bses) (Apps_Fib_H8t state));
    (!func {Fib_st_parsd {List_nil} {List_nil} {List_nil}})
}

fun (Apps_Fib_85t x0 x1 x2 x3 x4 x5) {
  (Apps_Fib_85t depth id {Bt_base2} tail lft rgt) =
    dup _4 _5 = id; dup _2 _3 = tail; dup _0 _1 = depth; @x let new_depth = (U120_inc _0);
    dup _6 _7 = new_depth; let a = (Apps_Fib_fct _6 _4 _2 lft);
    let b = (Apps_Fib_fct _7 (| _5 (<< #1 _1)) _3 rgt);
    (!a (!b x))
}

// Apps.Fib.State.parse.table (depth: (U120)) (id: (U120)) (bases: (List (Data.BaseTree.Base))) (map: (Data.BaseTree bases (U120))) : (_: (Apps.Fib.State.Parsed)) (Apps.Fib.State.Parsed)
fun (Apps_Fib_fct depth id bases map) {
  (Apps_Fib_fct ~ ~ {List_nil} #0) =
    @x x
  (Apps_Fib_fct ~ id {List_nil} entity) =
    dup _0 _1 = id; (Apps_Fib_MVU (U120_log2 _0) _1 entity)
  (Apps_Fib_fct depth id {List_cons .0 tail} {Bt_bin_tie lft rgt}) =
    (Apps_Fib_85t depth id .0 tail lft rgt)
}

// Apps.Fib.State.parse.id (type: (U120)) (id: (Apps.Fib.Id)) (entity: (Apps.Fib.Entity)) : (_: (Apps.Fib.State.Parsed)) (Apps.Fib.State.Parsed)
fun (Apps_Fib_MVU type id entity) {
  (Apps_Fib_MVU #7 id entity) =
    @x let npc = (Apps_Fib_GO0 id entity);
    (Apps_Fib_c7Q npc x)
  (Apps_Fib_MVU #8 ~ ~) =
    @x x
  (Apps_Fib_MVU #9 id entity) =
    @x let monster = (Apps_Fib_z_Q id entity);
    (Apps_Fib_C4d monster x)
  (Apps_Fib_MVU #10 ~ entity) =
    @x let player = (Fib_plr_prse entity);
    (Apps_Fib_ZJh player x)
  (Apps_Fib_MVU #11 ~ entity) =
    @x let player = (Fib_plr_prse entity);
    (Apps_Fib_ZJh player x)
  (Apps_Fib_MVU ~ ~ ~) =
    @x x
}

// Apps.Fib.State.parse.join_npc (npc: (Apps.Fib.Thing)) (b: (Apps.Fib.State.Parsed)) : (Apps.Fib.State.Parsed)
fun (Apps_Fib_c7Q npc b) {
  (Apps_Fib_c7Q npc {Fib_st_parsd n m p}) =
    {Fib_st_parsd {List_cons npc n} m p}
}

// Apps.Fib.State.parse.join_monster (monster: (Apps.Fib.Thing)) (b: (Apps.Fib.State.Parsed)) : (Apps.Fib.State.Parsed)
fun (Apps_Fib_C4d monster b) {
  (Apps_Fib_C4d monster {Fib_st_parsd n m p}) =
    {Fib_st_parsd n {List_cons monster m} p}
}

// Apps.Fib.State.parse.join_player (player: (Apps.Fib.Thing)) (b: (Apps.Fib.State.Parsed)) : (Apps.Fib.State.Parsed)
fun (Apps_Fib_ZJh player b) {
  (Apps_Fib_ZJh player {Fib_st_parsd n m p}) =
    {Fib_st_parsd n m {List_cons player p}}
}

// Apps.Fib.State.parse.id_07 (id: (Apps.Fib.Id)) (entity: (Apps.Fib.Entity)) : (Apps.Fib.Thing)
fun (Apps_Fib_GO0 id entity) {
  (Apps_Fib_GO0 #128 entity) =
    (Apps_Fib_lVy #128 entity)
  (Apps_Fib_GO0 #129 entity) =
    (Apps_Fib_lVy #129 entity)
  (Apps_Fib_GO0 #130 entity) =
    (Apps_Fib_lVy #130 entity)
}

// Apps.Fib.State.parse.id_09 (id: (Apps.Fib.Id)) (entity: (Apps.Fib.Entity)) : (Apps.Fib.Thing)
fun (Apps_Fib_z_Q id entity) {
  (Apps_Fib_z_Q #512 entity) =
    (Apps_Fib_CQK #512 entity)
  (Apps_Fib_z_Q #513 entity) =
    (Apps_Fib_CQK #513 entity)
  (Apps_Fib_z_Q #514 entity) =
    (Apps_Fib_CQK #514 entity)
}

// Apps.Fib.State.get_table (state: (Apps.Fib.State)) : (Apps.Fib.Table)
fun (Apps_Fib_H8t state) {
  (Apps_Fib_H8t {Fib_st_new ~ tbl}) =
    tbl
}

// Apps.Fib.State.new (map: (Apps.Fib.Map)) (tab: (Apps.Fib.Table)) : (Apps.Fib.State)
ctr {Fib_st_new map tab}

// Apps.Fib.Table.Bases : (List (Data.BaseTree.Base))
fun (Fib_tbl_bses) {
  (Fib_tbl_bses) =
    {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_nil}}}}}}}}}}}}}
}

// List.cons -(t: Type) (head: t) (tail: (List t)) : (List t)
ctr {List_cons head tail}

// Data.BaseTree.Base.2 : (Data.BaseTree.Base)
ctr {Bt_base2}

// List.nil -(t: Type) : (List t)
ctr {List_nil}

// Data.BaseTree.Base.5 : (Data.BaseTree.Base)
ctr {Bt_base5}

// Apps.Fib.Map.Bases : (List (Data.BaseTree.Base))
fun (Fib_map_base) {
  (Fib_map_base) =
    {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base5} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_nil}}}}}}}}}}}
}

// U120.inc (n: (U120)) : (U120)
fun (U120_inc n) {
  (U120_inc n) =
    (+ n #1)
}

// Bool.if -(a: Type) (b: (Bool)) (t: a) (f: a) : a
fun (Bool_if b t f) {
  (Bool_if {Bool_true} t ~) =
    t
  (Bool_if {Bool_false} ~ f) =
    f
}

// Bool.true : (Bool)
ctr {Bool_true}

// Bool.false : (Bool)
ctr {Bool_false}

// Bool.or (a: (Bool)) (b: (Bool)) : (Bool)
fun (Bool_or a b) {
  (Bool_or {Bool_true} ~) =
    {Bool_true}
  (Bool_or {Bool_false} b) =
    b
}

// U60.less_than (a: U60) (b: U60) : (Bool)
fun (U60_ltn a b) {
  (U60_ltn a b) =
    (U60_tbool (< a b))
}

// U60.to_bool (n: U60) : (Bool)
fun (U60_tbool n) {
  (U60_tbool #0) =
    {Bool_false}
  (U60_tbool ~) =
    {Bool_true}
}

// U120.new (hi: U60) (lo: U60) : (U120)
fun (U120_new hi lo) {
  (U120_new hi lo) =
    (+ (<< hi #60) (>> (<< lo #60) #60))
}

// Apps.Fib.Player.parse (player: (Apps.Fib.Player)) : (Apps.Fib.Thing)
fun (Fib_plr_prse player) {
  (Fib_plr_prse player) =
    dup _0 _1 = player; dup _2 _3 = _0; dup _4 _5 = _1; dup _6 _7 = _2; dup _8 _9 = _3; dup _10 _11 = _4; dup _12 _13 = _5; dup _14 _15 = _6; dup _16 _17 = _7; dup _18 _19 = _8; dup _20 _21 = _9; dup _22 _23 = _10; dup _24 _25 = _11; dup _26 _27 = _12; dup _28 _29 = _13; {List_cons {T2 (Kindelia_Fud {String_cons #120 {String_nil}}) (Kindelia_4Fl (Fib_plr_p_gx _14))} {List_cons {T2 (Kindelia_Fud {String_cons #121 {String_nil}}) (Kindelia_4Fl (Fib_plr_p_gy _15))} {List_cons {T2 (Kindelia_Fud {String_cons #104 {String_cons #112 {String_nil}}}) (Kindelia_4Fl (Fib_plr_hp_g _16))} {List_cons {T2 (Kindelia_Fud {String_cons #120 {String_cons #112 {String_nil}}}) (Kindelia_4Fl (Fib_plr_xp_g _17))} {List_cons {T2 (Kindelia_Fud {String_cons #114 {String_cons #116 {String_nil}}}) (Kindelia_4Fl (Fib_plr_rt_g _18))} {List_cons {T2 (Kindelia_Fud {String_cons #115 {String_cons #108 {String_nil}}}) (Kindelia_4Fl (Fib_plr_sl_g _19))} {List_cons {T2 (Kindelia_Fud {String_cons #103 {String_cons #100 {String_nil}}}) (Kindelia_4Fl (Fib_plr_gd_g _20))} {List_cons {T2 (Kindelia_Fud {String_cons #99 {String_cons #100 {String_nil}}}) (Kindelia_4Fl (Fib_plr_cd_g _21))} {List_cons {T2 (Kindelia_Fud {String_cons #115 {String_cons #48 {String_nil}}}) (Kindelia_4Fl (Fib_plr_sk_g _22 #0))} {List_cons {T2 (Kindelia_Fud {String_cons #115 {String_cons #49 {String_nil}}}) (Kindelia_4Fl (Fib_plr_sk_g _23 #1))} {List_cons {T2 (Kindelia_Fud {String_cons #115 {String_cons #50 {String_nil}}}) (Kindelia_4Fl (Fib_plr_sk_g _24 #2))} {List_cons {T2 (Kindelia_Fud {String_cons #115 {String_cons #51 {String_nil}}}) (Kindelia_4Fl (Fib_plr_sk_g _25 #3))} {List_cons {T2 (Kindelia_Fud {String_cons #115 {String_cons #52 {String_nil}}}) (Kindelia_4Fl (Fib_plr_sk_g _26 #4))} {List_cons {T2 (Kindelia_Fud {String_cons #115 {String_cons #53 {String_nil}}}) (Kindelia_4Fl (Fib_plr_sk_g _27 #5))} {List_cons {T2 (Kindelia_Fud {String_cons #115 {String_cons #54 {String_nil}}}) (Kindelia_4Fl (Fib_plr_sk_g _28 #6))} {List_cons {T2 (Kindelia_Fud {String_cons #115 {String_cons #55 {String_nil}}}) (Kindelia_4Fl (Fib_plr_sk_g _29 #7))} {List_nil}}}}}}}}}}}}}}}}}
}

// Apps.Fib.Player.pos.get_x (player: (Apps.Fib.Player)) : (U120)
fun (Fib_plr_p_gx player) {
  (Fib_plr_p_gx player) =
    (Fib_g_u120 player #0 #8)
}

// Apps.Fib.get_in_u120 (chunk: (U120)) (pos: (U120)) (size: (U120)) : (U120)
fun (Fib_g_u120 chunk pos size) {
  (Fib_g_u120 chunk pos size) =
    let mask = (- (<< #1 size) #1);
    let num = (& (>> chunk pos) mask);
    num
}

// U60.greater_than (a: U60) (b: U60) : (Bool)
fun (U60_gtn a b) {
  (U60_gtn a b) =
    (U60_tbool (> a b))
}

// Kindelia.Convert.num_to_kstring (num: (U120)) : (U120)
fun (Kindelia_4Fl num) {
  (Kindelia_4Fl num) =
    let text = (!(U120_show num) {String_nil});
    (Kindelia_1C2 text #0)
}

// Kindelia.Convert.num_to_kstring.aux (num: (String)) (kdl_str: (U120)) : (U120)
fun (Kindelia_1C2 num kdl_str) {
  (Kindelia_1C2 {String_nil} kdl_str) =
    kdl_str
  (Kindelia_1C2 {String_cons h t} kdl_str) =
    let n = (Kindelia_Z2o h);
    let kdl_str = (| n (<< kdl_str #6));
    (Kindelia_1C2 t kdl_str)
}

// Kindelia.Convert.num_to_kstring.char (char: (Char)) : (U120)
fun (Kindelia_Z2o char) {
  (Kindelia_Z2o char) =
    (U120_new #0 (- char #47))
}

// String.nil : (String)
ctr {String_nil}

// String.cons (head: U60) (tail: (String)) : (String)
ctr {String_cons head tail}

// U120.show (num: (U120)) : (Show)
fun (U120_show num) {
  (U120_show #0) =
    @str {String_cons #48 str}
  (U120_show num) =
    dup _0 _1 = num; @str let ten = #10;
    dup _2 _3 = ten; (Pair_match (U120_dms _0 _2) @dm.fst @dm.snd let digit = (U120_low dm.snd);
    let rest = dm.fst;
    let next = {String_cons (+ #48 digit) str};
    let func = (Bool_if (U120_ltn _1 _3) @h h @h (!(U120_show rest) h));
    (!func next))
}

// U120.low (n: (U120)) : U60
fun (U120_low n) {
  (U120_low n) =
    (>> (<< n #60) #60)
}

// Pair.match -(a: Type) -(b: Type) (x: (Pair a b)) -(p: (x: (Pair a b)) Type) (new: (fst: a) (snd: b) (p (Pair.new a b fst snd))) : (p x)
fun (Pair_match x new) {
  (Pair_match {T2 fst_ snd_} new) =
    (!(!new fst_) snd_)
}

// U120.less_than (a: (U120)) (b: (U120)) : (Bool)
fun (U120_ltn a b) {
  (U120_ltn a b) =
    (U120_tbool (< a b))
}

// U120.to_bool (n: (U120)) : (Bool)
fun (U120_tbool n) {
  (U120_tbool #0) =
    {Bool_false}
  (U120_tbool ~) =
    {Bool_true}
}

// U120.div_mod (num: (U120)) (den: (U120)) : (Pair (U120) (U120))
fun (U120_dms num den) {
  (U120_dms ~ #0) =
    {T2 (U60_tu120 (/ #0 #0)) (U60_tu120 (% #0 #0))}
  (U120_dms num den) =
    dup _0 _1 = num; (Maybe_match (U120_msb _0) {T2 #0 #0} @msb.value let qr = {T2 #0 #0};
    let idx = (U120_inc msb.value);
    (U120_dm_go idx qr _1 den))
}

// U120.div_mod.go (idx: (U120)) (qr: (Pair (U120) (U120))) (num: (U120)) (den: (U120)) : (Pair (U120) (U120))
fun (U120_dm_go idx qr num den) {
  (U120_dm_go #0 qr ~ ~) =
    qr
  (U120_dm_go idx qr num den) =
    dup _8 _9 = num; dup _4 _5 = den; dup _6 _7 = _4; dup _2 _3 = qr; dup _0 _1 = idx; let quo = (Pair_fst _2);
    dup _16 _17 = quo; let rem = (Pair_snd _3);
    let rem = (<< rem #1);
    let bit = (U120_decs _0);
    dup _14 _15 = bit; let rem = (+ rem (U120_getb _8 _14));
    dup _10 _11 = rem; dup _12 _13 = _10; let qr = (Bool_if (U120_gte _11 _5) let quo = (U120_setb _16 _15);
    let rem = (- _12 _6);
    {T2 quo rem} {T2 _17 _13});
    (U120_dm_go (U120_decs _1) qr _9 _7)
}

// Maybe.match -(t: Type) (x: (Maybe t)) -(p: (x: (Maybe t)) Type) (none: (p (Maybe.none t))) (some: (value: t) (p (Maybe.some t value))) : (p x)
fun (Maybe_match x none some) {
  (Maybe_match {Maybe_none} none ~) =
    none
  (Maybe_match {Maybe_some value_} ~ some) =
    (!some value_)
}

// Maybe.none -(t: Type) : (Maybe t)
ctr {Maybe_none}

// Maybe.some -(t: Type) (value: t) : (Maybe t)
ctr {Maybe_some value}

// Pair.snd -(a: Type) -(b: Type) (pair: (Pair a b)) : b
fun (Pair_snd pair) {
  (Pair_snd {T2 ~ snd}) =
    snd
}

// U120.get_bit (num: (U120)) (bit: (U120)) : (U120)
fun (U120_getb num bit) {
  (U120_getb num bit) =
    (& (>> num bit) #1)
}

// U120.set_bit (num: (U120)) (bit: (U120)) : (U120)
fun (U120_setb num bit) {
  (U120_setb num bit) =
    let bit = (<< #1 bit);
    (| num bit)
}

// U120.msb (n: (U120)) : (Maybe (U120))
fun (U120_msb n) {
  (U120_msb #0) =
    {Maybe_none}
  (U120_msb n) =
    {Maybe_some (- (U120_msb_go n) #1)}
}

// U120.msb.go (n: (U120)) : (U120)
fun (U120_msb_go n) {
  (U120_msb_go #0) =
    #0
  (U120_msb_go n) =
    (+ #1 (U120_msb_go (>> n #1)))
}

// U120.greater_equal (a: (U120)) (b: (U120)) : (Bool)
fun (U120_gte a b) {
  (U120_gte a b) =
    (U120_tbool (>= a b))
}

// Pair.fst -(a: Type) -(b: Type) (pair: (Pair a b)) : a
fun (Pair_fst pair) {
  (Pair_fst {T2 fst ~}) =
    fst
}

// U120.dec (num: (U120)) : (U120)
fun (U120_decs num) {
  (U120_decs num) =
    (- num #1)
}

// U60.to_u120 (num: U60) : (U120)
fun (U60_tu120 num) {
  (U60_tu120 num) =
    (U120_new #0 num)
}

// Apps.Fib.Player.xp.get (player: (Apps.Fib.Player)) : (U120)
fun (Fib_plr_xp_g player) {
  (Fib_plr_xp_g player) =
    (Fib_g_u120 player #30 #12)
}

// Apps.Fib.Player.hp.get (player: (Apps.Fib.Player)) : (U120)
fun (Fib_plr_hp_g player) {
  (Fib_plr_hp_g player) =
    (Fib_g_u120 player #16 #14)
}

// Apps.Fib.Player.rt.get (player: (Apps.Fib.Player)) : (U120)
fun (Fib_plr_rt_g player) {
  (Fib_plr_rt_g player) =
    (Fib_g_u120 player #42 #3)
}

// Apps.Fib.Player.sl.get (player: (Apps.Fib.Player)) : (U120)
fun (Fib_plr_sl_g player) {
  (Fib_plr_sl_g player) =
    (Fib_g_u120 player #45 #3)
}

// Kindelia.Convert.to_kstring (string: (String)) : (U120)
fun (Kindelia_Fud string) {
  (Kindelia_Fud string) =
    (Kindelia_k7I string #0)
}

// Kindelia.Convert.to_kstring.aux (string: (String)) (kdl_str: (U120)) : (U120)
fun (Kindelia_k7I string kdl_str) {
  (Kindelia_k7I {String_nil} kdl_str) =
    kdl_str
  (Kindelia_k7I {String_cons h t} kdl_str) =
    dup _2 _3 = t; dup _0 _1 = kdl_str; let char = (Kindelia__pT h);
    (Maybe_match char (Kindelia_k7I _2 _0) @char.value let kdl_str = (| char.value (<< _1 #6));
    (Kindelia_k7I _3 kdl_str))
}

// Kindelia.Convert.to_kchar (char: (Char)) : (Maybe (U120))
fun (Kindelia__pT char) {
  (Kindelia__pT char) =
    dup _0 _1 = char; dup _2 _3 = _0; dup _4 _5 = _1; dup _6 _7 = _2; dup _8 _9 = _3; dup _10 _11 = _4; dup _12 _13 = _5; (Bool_if (Char_is_d5c0 _6) {Maybe_some (U120_new #0 (- _7 #47))} (Bool_if (Char_between #65 _8 #91) {Maybe_some (U120_new #0 (- _9 #54))} (Bool_if (Char_between #97 _10 #123) {Maybe_some (U120_new #0 (- _11 #60))} (Bool_if (Char_equal _12 #46) {Maybe_some #0} (Bool_if (Char_equal _13 #95) {Maybe_some #63} {Maybe_none})))))
}

// Char.between (a: (Char)) (b: (Char)) (c: (Char)) : (Bool)
fun (Char_between a b c) {
  (Char_between a b c) =
    (U60_between a b c)
}

// U60.between (small: U60) (val: U60) (big: U60) : (Bool)
fun (U60_between small val big) {
  (U60_between small val big) =
    dup _0 _1 = val; (U60_tbool (& (<= small _0) (< _1 big)))
}

// Char.is_decimal (c: (Char)) : (Bool)
fun (Char_is_d5c0 c) {
  (Char_is_d5c0 c) =
    (Char_between #48 c #57)
}

// Char.equal (a: (Char)) (b: (Char)) : (Bool)
fun (Char_equal a b) {
  (Char_equal a b) =
    (U60_equal a b)
}

// U60.equal (a: U60) (b: U60) : (Bool)
fun (U60_equal a b) {
  (U60_equal a b) =
    (U60_tbool (== a b))
}

// Apps.Fib.Player.gd.get (player: (Apps.Fib.Player)) : (U120)
fun (Fib_plr_gd_g player) {
  (Fib_plr_gd_g player) =
    (Fib_g_u120 player #48 #12)
}

// Apps.Fib.Player.skills.get (player: (Apps.Fib.Player)) (slot: (U120)) : (U120)
fun (Fib_plr_sk_g player slot) {
  (Fib_plr_sk_g player slot) =
    (Fib_g_u120 player (+ #72 (* slot #6)) #6)
}

// U60.mul.carrying (a: U60) (b: U60) : (U120)
fun (U60_mul_car a b) {
  (U60_mul_car a b) =
    dup _2 _3 = a; dup _0 _1 = b; let alo = (>> (<< _2 #30) #30);
    dup _18 _19 = alo; let ahi = (>> _3 #30);
    dup _16 _17 = ahi; let blo = (>> (<< _0 #30) #30);
    dup _14 _15 = blo; let bhi = (>> _1 #30);
    dup _12 _13 = bhi; let mul0 = (* _18 _14);
    let mul1 = (* _19 _12);
    dup _10 _11 = mul1; let mul2 = (* _16 _15);
    dup _8 _9 = mul2; let mul3 = (* _17 _13);
    let mul1.lo = (<< _10 #30);
    let mul2.lo = (<< _8 #30);
    let add.lo1 = (U60_add_ow mul0 mul1.lo);
    dup _6 _7 = add.lo1; let add.lo2 = (U60_add_ow (Pair_snd _6) mul2.lo);
    dup _4 _5 = add.lo2; let car.lo1 = (Bool_tu60 (Pair_fst _7));
    let car.lo2 = (Bool_tu60 (Pair_fst _4));
    let carry = (+ car.lo1 car.lo2);
    let c.lo = (Pair_snd _5);
    let mul1.hi = (>> _11 #30);
    let mul2.hi = (>> _9 #30);
    let c.hi = (+ mul1.hi (+ mul2.hi (+ mul3 carry)));
    (U120_new c.hi c.lo)
}

// Bool.to_u60 (b: (Bool)) : U60
fun (Bool_tu60 b) {
  (Bool_tu60 {Bool_false}) =
    #0
  (Bool_tu60 {Bool_true}) =
    #1
}

// U60.add.overflowing (a: U60) (b: U60) : (Pair (Bool) U60)
fun (U60_add_ow a b) {
  (U60_add_ow a b) =
    dup _0 _1 = a; let res = (+ _0 b);
    dup _2 _3 = res; let ovr = (U60_ltn _2 _1);
    {T2 ovr _3}
}

// U120.high (n: (U120)) : U60
fun (U120_highs n) {
  (U120_highs n) =
    (>> n #60)
}

// Apps.Fib.Player.cd.get (player: (Apps.Fib.Player)) : (U120)
fun (Fib_plr_cd_g player) {
  (Fib_plr_cd_g player) =
    (Fib_g_u120 player #60 #12)
}

// Apps.Fib.Player.pos.get_y (player: (Apps.Fib.Player)) : (U120)
fun (Fib_plr_p_gy player) {
  (Fib_plr_p_gy player) =
    (Fib_g_u120 player #8 #8)
}

// Data.BaseTree.Bin.tie -(r: Type) (b0: r) (b1: r) : (Data.BaseTree.Bin r)
ctr {Bt_bin_tie b0 b1}

// Apps.Fib.State.Parsed.new (npcs: (List (Apps.Fib.Thing))) (mons: (List (Apps.Fib.Thing))) (play: (List (Apps.Fib.Thing))) : (Apps.Fib.State.Parsed)
ctr {Fib_st_parsd npcs mons play}

// Apps.Fib.Npc.bat_cave.parse (id: (Apps.Fib.Id)) (entity: (Apps.Fib.Entity)) : (Apps.Fib.Thing)
fun (Apps_Fib_lVy id entity) {
  (Apps_Fib_lVy id entity) =
    {List_cons {T2 (Kindelia_Fud {String_cons #116 {String_cons #121 {String_cons #112 {String_cons #101 {String_nil}}}}}) (Kindelia_Fud {String_cons #98 {String_cons #97 {String_cons #116 {String_cons #32 {String_cons #99 {String_cons #97 {String_cons #118 {String_cons #101 {String_nil}}}}}}}}})} {List_cons {T2 (Kindelia_Fud {String_cons #105 {String_cons #100 {String_nil}}}) (Kindelia_4Fl (- id #128))} {List_cons {T2 (Kindelia_Fud {String_cons #99 {String_cons #100 {String_nil}}}) (Kindelia_4Fl entity)} {List_nil}}}}
}

// Apps.Fib.Monster.bat.parse (id: (Apps.Fib.Id)) (entity: (Apps.Fib.Entity)) : (Apps.Fib.Thing)
fun (Apps_Fib_CQK id entity) {
  (Apps_Fib_CQK id entity) =
    dup _0 _1 = entity; dup _2 _3 = _0; {List_cons {T2 (Kindelia_Fud {String_cons #116 {String_cons #121 {String_cons #112 {String_cons #101 {String_nil}}}}}) (Kindelia_Fud {String_cons #98 {String_cons #97 {String_cons #116 {String_nil}}}})} {List_cons {T2 (Kindelia_Fud {String_cons #105 {String_cons #100 {String_nil}}}) (Kindelia_4Fl (- id #512))} {List_cons {T2 (Kindelia_Fud {String_cons #120 {String_nil}}) (Kindelia_4Fl (Fib_plr_p_gx _1))} {List_cons {T2 (Kindelia_Fud {String_cons #121 {String_nil}}) (Kindelia_4Fl (Fib_plr_p_gy _2))} {List_cons {T2 (Kindelia_Fud {String_cons #104 {String_cons #112 {String_nil}}}) (Kindelia_4Fl (Fib_plr_hp_g _3))} {List_nil}}}}}}
}

// U120.log2 (n: (U120)) : (U120)
fun (U120_log2 n) {
  (U120_log2 n) =
    (U120_log2_go #0 (>> n #1))
}

// U120.log2.go (count: (U120)) (n: (U120)) : (U120)
fun (U120_log2_go count n) {
  (U120_log2_go count #0) =
    count
  (U120_log2_go count n) =
    (U120_log2_go (U120_inc count) (>> n #1))
}

