#kdl_name = Fib_pos_drpl
//This function assumes that the "repelled" unit is at the origin
//example: for delta = (3, 2) and strenght 3; the result will be (-2, -1), meaning that the repelled unit will move from origin to (-2, -1) when the repeller is at (3, 2).
//y_prio decides which axis has a priority when it would be fair to move to any of them, source: dude trust me

Apps.Fib.Pos.Delta.repel (delta: Pair U120 U120) (strength: U120) (y_prio: Bool) : Pair U120 U120 
Apps.Fib.Pos.Delta.repel delta (U120.new 0 0) y_prio = Pair.new (U120.new 0 0) (U120.new 0 0)
Apps.Fib.Pos.Delta.repel delta strength y_prio =
  let dx = U120.distance (U120.new 0 0) (Pair.fst delta)
  let dy = U120.distance (U120.new 0 0) (Pair.snd delta) 
  
  let dist = (U120.add dx dy)
  
  let x_div = U120.div_mod (U120.mul dx strength) dist
  let y_div = U120.div_mod (U120.mul dy strength) dist

  let new_x = Pair.fst x_div
  let new_y = Pair.fst y_div

  let x_mod = Pair.snd x_div
  let y_mod = Pair.snd y_div

  let cmp = U120.compare x_mod y_mod

  let inc_x = Pair.new (U120.neg (Pair.fst delta) (U120.inc new_x)) (U120.neg (Pair.snd delta) new_y)
  let inc_y = Pair.new (U120.neg (Pair.fst delta) new_x) (U120.neg (Pair.snd delta) (U120.inc new_y))

  match Cmp cmp {
    ltn => inc_y
    gtn => inc_x
    eql => Bool.if y_prio inc_y inc_x
  }

// Main {
//   let m3 = (U120.sub (U120.new 0 0) (U120.new 0 3))
//   let thr = (U120.new 0 3)
//   let delta = Pair.new m3 m3
//   Apps.Fib.Pos.Delta.repel delta (U120.new 0 5) Bool.false
// }

