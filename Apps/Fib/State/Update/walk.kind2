#kdl_name = Fib_st_walk
Apps.Fib.State.Update.walk (state: Apps.Fib.State) (data: U120) (id: Apps.Fib.Id) (player: Apps.Fib.Entity) (frame: U120): Pair Apps.Fib.State Apps.Fib.Events {
  if (Apps.Fib.Player.is_dead player)
    {Pair.new state List.nil}
  else {
    let pos        = Apps.Fib.Player.pos.get player
    let delta      = Apps.Fib.State.Update.walk.direction data
    let target     = Apps.Fib.Pos.modify pos delta
    match Maybe target {
      none => Pair.new state List.nil
      some => 
        let move = Apps.Fib.Skill.move
        let res  = move state id target.value frame
          match Apps.Fib.Interaction.Result res {
            err => Pair.new state List.nil
            new => Pair.new res.state (List.cons (Apps.Fib.Event.act_walk ( target.value) id) res.events)
        }
    }
  }
}

#kdl_name = Fib_st_walkd
Apps.Fib.State.Update.walk.direction (data: U120) : Pair U120 U120 
Apps.Fib.State.Update.walk.direction (U120.new 0 0) = Pair.new (U120.new 0 0) (U120.sub (U120.new 0 0) (U120.new 0 1))
Apps.Fib.State.Update.walk.direction (U120.new 0 1) = Pair.new (U120.sub (U120.new 0 0) (U120.new 0 1)) (U120.new 0 0)
Apps.Fib.State.Update.walk.direction (U120.new 0 2) = Pair.new (U120.new 0 0) (U120.new 0 1)
Apps.Fib.State.Update.walk.direction (U120.new 0 3) = Pair.new (U120.new 0 1) (U120.new 0 0)
Apps.Fib.State.Update.walk.direction n              = Pair.new (U120.new 0 0) (U120.new 0 0)


