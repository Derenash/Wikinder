#kdl_name = Fib_st_walk
Apps.Fib.State.Update.walk (state: Apps.Fib.State) (data: U120) (entity: Apps.Fib.Entity) (player_id: Apps.Fib.Id) (frame: U120): Pair Apps.Fib.State Apps.Fib.Events {
  let pos        = Apps.Fib.Pos.new (Apps.Fib.Player.pos.get_x entity) (Apps.Fib.Player.pos.get_y entity)
  let delta      = Apps.Fib.State.Update.walk.direction data
  let target     = Apps.Fib.Pos.modify pos delta
  match Maybe target {
    none => Pair.new state List.nil
    some => 
      let move = HVM.log (Pair.new (Sigma.fst pos) (Sigma.fst target.value)) Apps.Fib.Skill.move
      let res  = move state player_id target.value frame
        match Apps.Fib.Interaction.Result res {
        err => Pair.new state List.nil
        new => Pair.new res.state (List.cons (Apps.Fib.Event.act_walk (Sigma.fst target.value) player_id) res.events)
      }
  }
}

Apps.Fib.State.Update.walk.direction (data: U120) : Pair U120 U120 
Apps.Fib.State.Update.walk.direction (U120.new 0 0) = Pair.new (U120.new 0 0) (U120.sub (U120.new 0 0) (U120.new 0 1))
Apps.Fib.State.Update.walk.direction (U120.new 0 1) = Pair.new (U120.sub (U120.new 0 0) (U120.new 0 1)) (U120.new 0 0)
Apps.Fib.State.Update.walk.direction (U120.new 0 2) = Pair.new (U120.new 0 0) (U120.new 0 1)
Apps.Fib.State.Update.walk.direction (U120.new 0 3) = Pair.new (U120.new 0 1) (U120.new 0 0)
Apps.Fib.State.Update.walk.direction n              = Pair.new (U120.new 0 0) (U120.new 0 0)


