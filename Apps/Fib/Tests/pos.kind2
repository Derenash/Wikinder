Apps.Fib.Pos.Delta.test (x_axis: U60) (y_axis: U60) : String {
  Apps.Fib.Pos.Delta.test_aux1 x_axis y_axis ""
}


Apps.Fib.Pos.kekw (pos: Apps.Fib.Pos) : Pair U60 U60 {
  let j = U120.low pos
  let x = (% j 256)
  let y = (>> j 8)
  Pair.new x y
}

Greatest (list: List (Pair U60 U60)) (greater: U60) : U60 {
  let fst = List.head list 
  let snd = List.head (List.tail list)
  match Maybe fst { 
    none => greater
    some => match Maybe snd {
      none => greater
      some => 
        let f_v = Pair.fst fst.value
        let s_v = Pair.fst snd.value
        if (U60.greater_than f_v s_v) {
          Greatest (List.cons (Pair.new f_v 0) (List.tail (List.tail list))) f_v
        } else {
          Greatest (List.tail list) s_v
        }
    }
  }
}

Apps.Fib.Pos.divide_lists (list: List (Pair U60 U60)) : List (List (Pair U60 U60)) {
  let greatest = Greatest list 0
  List.reverse (Apps.Fib.Pos.divide_lists_aux list [] [] greatest)
}

Head <a> (list: List a) : a
Head a (List.cons t head tail) = head

Apps.Fib.Pos.divide_lists_aux (list: List (Pair U60 U60)) (acum: List (List (Pair U60 U60))) (acum2: List (Pair U60 U60)) (greatest: U60) : List (List (Pair U60 U60))
Apps.Fib.Pos.divide_lists_aux List.nil acum acum2 greatest = acum
Apps.Fib.Pos.divide_lists_aux list acum acum2 greatest = 
  let fst = Head list
  let val = Pair.fst fst
  if (U60.equal val greatest) {
    let acum2 = List.cons fst acum2
    Apps.Fib.Pos.divide_lists_aux (List.tail list) acum acum2 greatest
  } else { 
    Apps.Fib.Pos.divide_lists_aux list (List.cons acum2 acum) [] (- greatest 1)
  }
  



Apps.Fib.Pos.Delta.test_aux1 (x_axis: U60) (y_axis: U60) (line: String) : String
Apps.Fib.Pos.Delta.test_aux1 x y line = 
  String.concat (String.cons 10 "") (Apps.Fib.Pos.Delta.test_aux2 x y line)


Apps.Fib.Pos.Delta.test_aux2 (x_axis: U60) (y_axis: U60) (line: String) : String
Apps.Fib.Pos.Delta.test_aux2 0 0 line = ""
Apps.Fib.Pos.Delta.test_aux2 0 1 line = (String.cons 10 "")
Apps.Fib.Pos.Delta.test_aux2 0 y line = 
  String.concat (String.concat (String.cons 10 "") line) (Apps.Fib.Pos.Delta.test_aux2 0 (- y 1) line)
Apps.Fib.Pos.Delta.test_aux2 x y line = String.concat ". "  (Apps.Fib.Pos.Delta.test_aux2 (- x 1)  y (String.concat ". "line))


Main { 
  let range = U120.new 0 2
  let coord = U120.new 0 5
  let delta = Pair.new (U120.new 0 1) (U120.new 0 0)
  let coord = Apps.Fib.Pos.new coord coord
  let horizontal   = Apps.Fib.Pos.Delta.horizontal (U120.dec range) range
  let vertical     = Apps.Fib.Pos.Delta.vertical   (U120.dec range) range
  let empty_square = Apps.Fib.Pos.Delta.empty_square range
  let points  = Apps.Fib.Pos.Delta.cross range
  let diamond = Apps.Fib.Pos.Delta.diamond range
  let cross   = List.cons (Pair.new U120.0 U120.0) (Apps.Fib.Pos.Delta.cross range)
  let around  = Apps.Fib.Pos.Delta.around range
  let line    = Apps.Fib.Pos.Delta.line range delta
  let ring    = Apps.Fib.Pos.Delta.ring range
  //let delta = List.concat horizontal vertical
  //let list  = Apps.Fib.Pos.range coord empty_square
  //let list  = Apps.Fib.Pos.range coord points
  let list = Apps.Fib.Pos.range coord ring
  //Apps.Fib.Pos.Delta.test 12 12 
  let to_sort = List.map list (x => Apps.Fib.Pos.kekw x)
  let comp    = (x: Pair U60 U60) => (y: Pair U60 U60) => (
    let x0 = Pair.fst x
    let x1 = Pair.fst y
    let y0 = Pair.snd x
    let y1 = Pair.snd y
    let cmpx  = U60.compare x0 x1
    let cmpy  = U60.compare y0 y1
    
    match Cmp cmpx {
      ltn => Bool.true
      eql => U60.greater_than y1 y0
      gtn => Bool.false
    }
  )
  let sort    = List.sort comp to_sort
  Apps.Fib.Pos.divide_lists sort
  //List.map list (x => Apps.Fib.Pos.show x)
}



      //0 1 2 3 4 5 6 7 8 9 0
      //. . . . . . . . . . . 0
      //. . . . . . . . . . . 9
      //. . . . . . . . . . . 8
      //. . . . . . . . . . . 7
      //. . . . . o . . . . . 6
      //. . . . o x o . . . . 5
      //. . . . . o . . . . . 4
      //. . . . . . . . . . . 3
      //. . . . . . . . . . . 2
      //. . . . . . . . . . . 1
      //. . . . . . . . . . . 0


      //0 1 2 3 4 5 6 7 8 9 0
      //. . . . . . . . . . . 0
      //. . . . . . . . . . . 9
      //. . . . . . . . . . . 8
      //. . . . . . . . . . . 7
      //. . . . . o . . . . . 6
      //. . . . o x o . . . . 5
      //. . . . . o . . . . . 4
      //. . . . . . . . . . . 3
      //. . . . . . . . . . . 2
      //. . . . . . . . . . . 1
      //. . . . . . . . . . . 0

//[(Pair.new 7 4), (Pair.new 7 5), (Pair.new 7 6)], 
//[(Pair.new 6 3), (Pair.new 6 7)],
//[(Pair.new 5 3), (Pair.new 5 7)],
//[(Pair.new 4 3), (Pair.new 4 7)]]

      //0 1 2 3 4 5 6 7 8 9 0
      //. . . . . . . . . . . 0
      //. . . . . . . . . . . 9
      //. . . . . . . . . . . 8
      //. . . . o o o . . . . 7
      //. . . o . . . o . . . 6
      //. . . o . x . o . . . 5
      //. . . o . . . o . . . 4
      //. . . . o o o . . . . 3
      //. . . . . . . . . . . 2
      //. . . . . . . . . . . 1
      //. . . . . . . . . . . 0


      //0 1 2 3 4 5 6 7 8 9 0
      //. . . . . . . . . . . 0
      //. . . . . . . . . . . 9
      //. . . . o o o . . . . 8
      //. . . o . . . o . . . 7
      //. . o . . . . . o . . 6
      //. . o . . x . . o . . 5
      //. . o . . . . . o . . 4
      //. . . o . . . o . . . 3
      //. . . . o o o . . . . 2
      //. . . . . . . . . . . 1
      //. . . . . . . . . . . 0



      //0 1 2 3 4 5 6 7 8 9 0
      //. . . . . . . . . . . 0
      //. . . o o o o o . . . 9
      //. . o . . . . . o . . 8
      //. o . . . . . . . o . 7
      //. o . . . . . . . o . 6
      //. o . . . x . . . o . 5
      //. o . . . . . . . o . 4
      //. o . . . . . . . o . 3
      //. . o . . . . . o . . 2
      //. . . o o o o o . . . 1
      //. . . . . . . . . . . 0



      //0 1 2 3 4 5 6 7 8 9 0
      //. . . o o o o o . . . 0
      //. . o . . . . . o . . 9
      //. o . . . . . . . o . 8
      //o . . . . . . . . . o 7
      //o . . . . . . . . . o 6
      //o . . . . x . . . . o 5
      //o . . . . . . . . . o 4
      //o . . . . . . . . . o 3
      //. o . . . . . . . o . 2
      //. . o . . . . . o . . 1
      //. . . o o o o o . . . 0
      


      //0 1 2 3 4 5 6 7 8 9 0 11 12
      //. . . o o o o o o o . . . 12
      //. . o . . . . . . . o . . 11
      //. o . . . . . . . . . o . 10
      //o . . . . . . . . . . . o 9
      //o . . . . . . . . . . . o 8
      //o . . . . . . . . . . . o 7
      //o . . . . . x . . . . . o 6
      //o . . . . . . . . . . . o 5
      //o . . . . . . . . . . . o 4 
      //o . . . . . . . . . . . o 3
      //. o . . . . . . . . . o . 2 
      //. . o . . . . . . . o . . 1
      //. . . o o o o o o o . . . 0





      //0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      //. . . . o o o o o o o . . . . 4
      //. . . o . . . . . . . o . . . 3
      //. . o . . . . . . . . . o . . 2
      //. o . . . . . . . . . . . o . 1
      //o . . . . . . . . . . . . . o 0
      //o . . . . . . . . . . . . . o 9
      //o . . . . . . . . . . . . . o 8
      //o . . . . . . x . . . . . . o 7
      //o . . . . . . . . . . . . . o 6
      //o . . . . . . . . . . . . . o 5
      //o . . . . . . . . . . . . . o 4
      //. o . . . . . . . . . . . o . 3
      //. . o . . . . . . . . . o . . 2
      //. . . o . . . . . . . o . . . 1
      //. . . . o o o o o o o . . . . 0




      //0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      //. . . . . . . . . . . . . . . 4
      //. . . . . . . . . . . . . . . 3
      //. . . . . . . . . . . . . . . 2
      //. . . . . . . . . . . . . . . 1
      //. . . . . . . . . . . . . . . 0
      //. . . . . . . . . . . . . . . 9
      //. . . . . . . . . . . . . . . 8
      //. . . . . . . . . . . . . . . 7
      //. . . . . . . . . . . . . . . 6
      //. . . . . . . . . . . . . . . 5
      //. . . . . . . . . . . . . . . 4
      //. . . . . . . . . . . . . . . 3
      //. . . . . . . . . . . . . . . 2
      //. . . . . . . . . . . . . . . 1
      //. . . . . . . . . . . . . . . 0



      //0 1 2 3 4 5 6
      //. . x x x x x 6
      //. . x . . . x 5 
      //. . x . . . x 4
      //. . x . . . x 3
      //. . x x x x x 2
      //. . . . . . . 1
      //. . . . . . . 0




      //0 1 2 3 4 5 6
      //. . . . l . . 6
      //. . . . l . . 5 
      //. . l l . l l 4
      //. . . . l . . 3
      //. . . . l . . 2
      //. . . . . . . 1
      //. . . . . . . 0


       //(Neg)        (Pos)

      //6 4 3 2 1 0 1 2 3 4 5
      //. . . . . . . . . . . +5
      //. . . . . o . . . . . +4
      //. . . . o . o . . . . +3
      //. . . o . . . o . . . +2
      //. . o . . . . . o . . +1
      //. o . . . . . . . o . +0
      //. . o . . . . . o . . -1
      //. . . o . . . o . . . -2
      //. . . . o . o . . . . -3
      //. . . . . o . . . . . -4
      //. . . . . . . . . . . -5

