// Fib.init : _
fun (Fib_init) {
  (Fib_init) =
    (Apps_Fib_lhN)
}

// Apps.Fib.kindelia.Response.parsed (data: (Apps.Fib.State.Parsed)) : (Apps.Fib.kindelia.Response)
ctr {Apps_Fib_JmH data}

// Apps.Fib.kindelia.Response.none : (Apps.Fib.kindelia.Response)
ctr {Apps_Fib_ock}

// U120.new (hi: U60) (lo: U60) : (U120)
fun (U120_new hi lo) {
  (U120_new hi lo) =
    (+ (<< hi #60) (>> (<< lo #60) #60))
}

// Apps.Fib.kindelia.Act.parse : (Apps.Fib.kindelia.Act)
ctr {Fib_kdl_a_p}

// Apps.Fib.State.init : (Apps.Fib.State)
fun (Fib_st_init) {
  (Fib_st_init) =
    let map = (Fib_map_allc);
    let tab = (Fib_tbl_allc);
    {Fib_st_new map tab}
}

// Apps.Fib.Map.alloc : (Apps.Fib.Map)
fun (Fib_map_allc) {
  (Fib_map_allc) =
    (Bt_alloc (Fib_map_base) #0)
}

// Apps.Fib.Map.Bases : (List (Data.BaseTree.Base))
fun (Fib_map_base) {
  (Fib_map_base) =
    {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base5} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_nil}}}}}}}}}}}
}

// Data.BaseTree.Base.5 : (Data.BaseTree.Base)
ctr {Bt_base5}

// List.nil -(t: Type) : (List t)
ctr {List_nil}

// List.cons -(t: Type) (head: t) (tail: (List t)) : (List t)
ctr {List_cons head tail}

// Data.BaseTree.Base.2 : (Data.BaseTree.Base)
ctr {Bt_base2}

fun (Bt_alloc0_ x0 x1 x2) {
  (Bt_alloc0_ {Bt_base2} t default) =
    let m = (Bt_alloc t default);
    dup _0 _1 = m; {Bt_bin_tie _0 _1}
  (Bt_alloc0_ {Bt_base5} t default) =
    let m = (Bt_alloc t default);
    dup _0 _1 = m; dup _2 _3 = _0; dup _4 _5 = _1; dup _6 _7 = _2; {Bt_qui_tie _3 _4 _5 _6 _7}
}

// Data.BaseTree.alloc -(val: Type) (bases: (List (Data.BaseTree.Base))) (default: val) : (Data.BaseTree bases val)
fun (Bt_alloc bases default) {
  (Bt_alloc {List_nil} default) =
    default
  (Bt_alloc {List_cons .0 t} default) =
    (Bt_alloc0_ .0 t default)
}

// Data.BaseTree.Bin.tie -(r: Type) (b0: r) (b1: r) : (Data.BaseTree.Bin r)
ctr {Bt_bin_tie b0 b1}

// Data.BaseTree.Qui.tie -(r: Type) (b0: r) (b1: r) (b2: r) (b3: r) (b4: r) : (Data.BaseTree.Qui r)
ctr {Bt_qui_tie b0 b1 b2 b3 b4}

// Apps.Fib.Table.alloc : (Apps.Fib.Table)
fun (Fib_tbl_allc) {
  (Fib_tbl_allc) =
    (Bt_alloc (Fib_tbl_bses) #0)
}

// Apps.Fib.Table.Bases : (List (Data.BaseTree.Base))
fun (Fib_tbl_bses) {
  (Fib_tbl_bses) =
    {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_cons {Bt_base2} {List_nil}}}}}}}}}}}}}
}

// Apps.Fib.State.new (map: (Apps.Fib.Map)) (tab: (Apps.Fib.Table)) : (Apps.Fib.State)
ctr {Fib_st_new map tab}

// Apps.Fib.Player.new (x: (U120)) (y: (U120)) (hp: (U120)) (xp: (U120)) (rt: (U120)) (sl: (U120)) (gd: (U120)) (cd: (U120)) (skills: (List (U120))) : (Apps.Fib.Player)
fun (Fib_plr_new x y xp hp rt sl gd cd skills) {
  (Fib_plr_new x y xp hp rt sl gd cd skills) =
    let player = #0;
    let player = (Fib_plr_p_c player @~ (+ (<< y #8) x));
    let player = (Fib_plr_xp_c player @~ xp);
    let player = (Fib_plr_hp_c player @~ hp);
    let player = (Fib_plr_rt_c player @~ rt);
    let player = (Fib_plr_sl_c player @~ sl);
    let player = (Fib_plr_gd_c player @~ gd);
    let player = (Fib_plr_cd_c player @~ cd);
    let func = @skill_id @acc dup _0 _1 = acc; dup _2 _3 = _0; {T2 (Fib_plr_sk_c (Pair_fst _1) (Pair_snd _2) @~ skill_id) (+ (Pair_snd _3) #1)};
    let pair = (List_foldl {T2 player #0} func skills);
    (Pair_fst pair)
}

// Apps.Fib.Player.xp.change (player: (Apps.Fib.Player)) (f: (_: (U120)) (U120)) : (Apps.Fib.Player)
fun (Fib_plr_xp_c player f) {
  (Fib_plr_xp_c player f) =
    (Fib_m_u120 player #30 #12 f)
}

// Apps.Fib.mut_in_u120 (chunk: (U120)) (pos: (U120)) (size: (U120)) (f: (_: (U120)) (U120)) : (U120)
fun (Fib_m_u120 chunk pos size f) {
  (Fib_m_u120 chunk pos size f) =
    dup _2 _3 = pos; dup _4 _5 = _2; dup _0 _1 = chunk; let mask = (- (<< #1 size) #1);
    dup _6 _7 = mask; let num = (& (>> _0 _3) _6);
    let num = (!f num);
    let chunk = (& (U120_bwcom (<< _7 _4)) _1);
    let chunk = (| (<< num _5) chunk);
    chunk
}

// U60.greater_than (a: U60) (b: U60) : (Bool)
fun (U60_gtn a b) {
  (U60_gtn a b) =
    (U60_tbool (> a b))
}

// U60.to_bool (n: U60) : (Bool)
fun (U60_tbool n) {
  (U60_tbool #0) =
    {Bool_false}
  (U60_tbool ~) =
    {Bool_true}
}

// Bool.false : (Bool)
ctr {Bool_false}

// Bool.true : (Bool)
ctr {Bool_true}

// Bool.if -(a: Type) (b: (Bool)) (t: a) (f: a) : a
fun (Bool_if b t f) {
  (Bool_if {Bool_true} t ~) =
    t
  (Bool_if {Bool_false} ~ f) =
    f
}

// U120.bitwise_complement (n: (U120)) : (U120)
fun (U120_bwcom n) {
  (U120_bwcom n) =
    (^ n (U120_maxval))
}

// U120.max_val : (U120)
fun (U120_maxval) {
  (U120_maxval) =
    #1329227995784915872903807060280344575
}

// Apps.Fib.Player.cd.change (player: (Apps.Fib.Player)) (f: (_: (U120)) (U120)) : (Apps.Fib.Player)
fun (Fib_plr_cd_c player f) {
  (Fib_plr_cd_c player f) =
    (Fib_m_u120 player #60 #12 f)
}

// Apps.Fib.Player.gd.change (player: (Apps.Fib.Player)) (f: (_: (U120)) (U120)) : (Apps.Fib.Player)
fun (Fib_plr_gd_c player f) {
  (Fib_plr_gd_c player f) =
    (Fib_m_u120 player #48 #12 f)
}

// Apps.Fib.Player.skills.change (player: (Apps.Fib.Player)) (skill_id: (U120)) (f: (_: (U120)) (U120)) : (Apps.Fib.Player)
fun (Fib_plr_sk_c player skill_id f) {
  (Fib_plr_sk_c player skill_id f) =
    (Fib_m_u120 player (+ #72 (* skill_id #6)) #6 f)
}

// Bool.or (a: (Bool)) (b: (Bool)) : (Bool)
fun (Bool_or a b) {
  (Bool_or {Bool_true} ~) =
    {Bool_true}
  (Bool_or {Bool_false} b) =
    b
}

// U60.less_than (a: U60) (b: U60) : (Bool)
fun (U60_ltn a b) {
  (U60_ltn a b) =
    (U60_tbool (< a b))
}

// U60.mul.carrying (a: U60) (b: U60) : (U120)
fun (U60_mul_car a b) {
  (U60_mul_car a b) =
    dup _2 _3 = b; dup _0 _1 = a; let alo = (>> (<< _0 #30) #30);
    dup _18 _19 = alo; let ahi = (>> _1 #30);
    dup _16 _17 = ahi; let blo = (>> (<< _2 #30) #30);
    dup _14 _15 = blo; let bhi = (>> _3 #30);
    dup _12 _13 = bhi; let mul0 = (* _18 _14);
    let mul1 = (* _19 _12);
    dup _10 _11 = mul1; let mul2 = (* _16 _15);
    dup _8 _9 = mul2; let mul3 = (* _17 _13);
    let mul1.lo = (<< _10 #30);
    let mul2.lo = (<< _8 #30);
    let add.lo1 = (U60_add_ow mul0 mul1.lo);
    dup _6 _7 = add.lo1; let add.lo2 = (U60_add_ow (Pair_snd _6) mul2.lo);
    dup _4 _5 = add.lo2; let car.lo1 = (Bool_tu60 (Pair_fst _7));
    let car.lo2 = (Bool_tu60 (Pair_fst _4));
    let carry = (+ car.lo1 car.lo2);
    let c.lo = (Pair_snd _5);
    let mul1.hi = (>> _11 #30);
    let mul2.hi = (>> _9 #30);
    let c.hi = (+ mul1.hi (+ mul2.hi (+ mul3 carry)));
    (U120_new c.hi c.lo)
}

// Bool.to_u60 (b: (Bool)) : U60
fun (Bool_tu60 b) {
  (Bool_tu60 {Bool_false}) =
    #0
  (Bool_tu60 {Bool_true}) =
    #1
}

// Pair.fst -(a: Type) -(b: Type) (pair: (Pair a b)) : a
fun (Pair_fst pair) {
  (Pair_fst {T2 fst ~}) =
    fst
}

// U60.add.overflowing (a: U60) (b: U60) : (Pair (Bool) U60)
fun (U60_add_ow a b) {
  (U60_add_ow a b) =
    dup _0 _1 = a; let res = (+ _0 b);
    dup _2 _3 = res; let ovr = (U60_ltn _2 _1);
    {T2 ovr _3}
}

// Pair.snd -(a: Type) -(b: Type) (pair: (Pair a b)) : b
fun (Pair_snd pair) {
  (Pair_snd {T2 ~ snd}) =
    snd
}

// U120.low (n: (U120)) : U60
fun (U120_low n) {
  (U120_low n) =
    (>> (<< n #60) #60)
}

// U120.high (n: (U120)) : U60
fun (U120_highs n) {
  (U120_highs n) =
    (>> n #60)
}

// Apps.Fib.Player.sl.change (player: (Apps.Fib.Player)) (f: (_: (U120)) (U120)) : (Apps.Fib.Player)
fun (Fib_plr_sl_c player f) {
  (Fib_plr_sl_c player f) =
    (Fib_m_u120 player #45 #3 f)
}

// Apps.Fib.Player.hp.change (player: (Apps.Fib.Player)) (f: (_: (U120)) (U120)) : (Apps.Fib.Player)
fun (Fib_plr_hp_c player f) {
  (Fib_plr_hp_c player f) =
    (Fib_m_u120 player #16 #14 f)
}

// Apps.Fib.Player.rt.change (player: (Apps.Fib.Player)) (f: (_: (U120)) (U120)) : (Apps.Fib.Player)
fun (Fib_plr_rt_c player f) {
  (Fib_plr_rt_c player f) =
    (Fib_m_u120 player #42 #3 f)
}

// List.foldl -(a: Type) -(b: Type) (nil: b) (cons: (_: a) (_: b) b) (xs: (List a)) : b
fun (List_foldl nil cons xs) {
  (List_foldl nil ~ {List_nil}) =
    nil
  (List_foldl nil cons {List_cons x.h x.t}) =
    dup _0 _1 = cons; (List_foldl (!(!_0 x.h) nil) _1 x.t)
}

// Apps.Fib.Player.pos.change (player: (Apps.Fib.Player)) (f: (_: (U120)) (U120)) : (Apps.Fib.Player)
fun (Fib_plr_p_c player f) {
  (Fib_plr_p_c player f) =
    (Fib_m_u120 player #0 #16 f)
}

// Apps.Fib.State.player.place (state: (Apps.Fib.State)) (player: (Apps.Fib.Player)) (id: (Apps.Fib.Id)) : (Apps.Fib.State)
fun (Fib_st_pplc state player id) {
  (Fib_st_pplc {Fib_st_new map tab} player id) =
    dup _12 _13 = tab; dup _14 _15 = _12; dup _8 _9 = map; dup _10 _11 = _8; dup _4 _5 = id; dup _6 _7 = _4; dup _0 _1 = player; dup _2 _3 = _0; let x = (Fib_plr_p_gx _1);
    let y = (Fib_plr_p_gy _2);
    let pos = (Fib_pos_new x y);
    dup _16 _17 = pos; let map_id = (Fib_map_got _9 _16);
    (Pair_match map_id @map_id.fst @map_id.snd (Bool_if (U120_equal #0 map_id.snd) let tab_ent = (Fib_tbl_got _13 _5);
    (Pair_match tab_ent @tab_ent.fst @tab_ent.snd (Bool_if (U120_equal #0 tab_ent.snd) let tab = (Fib_tbl_set tab_ent.fst _3 _6);
    let map = (Fib_map_set map_id.fst _7 _17);
    {Fib_st_new map tab} {Fib_st_new _10 _14})) {Fib_st_new _11 _15}))
}

// Pair.match -(a: Type) -(b: Type) (x: (Pair a b)) -(p: (x: (Pair a b)) Type) (new: (fst: a) (snd: b) (p (Pair.new a b fst snd))) : (p x)
fun (Pair_match x new) {
  (Pair_match {T2 fst_ snd_} new) =
    (!(!new fst_) snd_)
}

// Apps.Fib.Table.got (map: (Apps.Fib.Table)) (id: (Apps.Fib.Id)) : (Pair (Apps.Fib.Table) (Apps.Fib.Entity))
fun (Fib_tbl_got map id) {
  (Fib_tbl_got map id) =
    (Bt_got (Fib_tbl_bses) (Fib_tbl_fid id) map)
}

// Apps.Fib.Table.Key.from_id (id: (U120)) : (Apps.Fib.Table.Key)
fun (Fib_tbl_fid id) {
  (Fib_tbl_fid id) =
    (Fib_tbl_fid0 (Fib_tbl_bses) id)
}

fun (Fib_tbl_flIa x0 x1 x2) {
  (Fib_tbl_flIa {Bt_base2} t id) =
    dup _0 _1 = id; (Fib_tbl_fid1 t (/ _0 #2) (% _1 #2))
}

// Apps.Fib.Table.Key.from_id.aux0 (bases: (List (Data.BaseTree.Base))) (id: (U120)) : (Data.BaseTree.Key bases)
fun (Fib_tbl_fid0 bases id) {
  (Fib_tbl_fid0 {List_nil} ~) =
    {T0}
  (Fib_tbl_fid0 {List_cons .0 t} id) =
    (Fib_tbl_flIa .0 t id)
}

// Apps.Fib.Table.Key.from_id.aux1 (bases: (List (Data.BaseTree.Base))) (id: (U120)) (b: (U120)) : (Data.BaseTree.Base.Bin (Data.BaseTree.Key bases))
fun (Fib_tbl_fid1 bases id b) {
  (Fib_tbl_fid1 bases id #0) =
    {Bt_base_b0 (Fib_tbl_fid0 bases id)}
  (Fib_tbl_fid1 bases id #1) =
    {Bt_base_b1 (Fib_tbl_fid0 bases id)}
}

// U120.div_mod (num: (U120)) (den: (U120)) : (Pair (U120) (U120))
fun (U120_dms num den) {
  (U120_dms ~ #0) =
    {T2 (U60_tu120 (/ #0 #0)) (U60_tu120 (% #0 #0))}
  (U120_dms num den) =
    dup _0 _1 = num; (Maybe_match (U120_msb _0) {T2 #0 #0} @msb.value let qr = {T2 #0 #0};
    let idx = (U120_inc msb.value);
    (U120_dm_go idx qr _1 den))
}

// U120.div_mod.go (idx: (U120)) (qr: (Pair (U120) (U120))) (num: (U120)) (den: (U120)) : (Pair (U120) (U120))
fun (U120_dm_go idx qr num den) {
  (U120_dm_go #0 qr ~ ~) =
    qr
  (U120_dm_go idx qr num den) =
    dup _8 _9 = qr; dup _6 _7 = idx; dup _2 _3 = den; dup _4 _5 = _2; dup _0 _1 = num; let quo = (Pair_fst _8);
    dup _16 _17 = quo; let rem = (Pair_snd _9);
    let rem = (<< rem #1);
    let bit = (U120_decs _6);
    dup _14 _15 = bit; let rem = (+ rem (U120_getb _0 _14));
    dup _10 _11 = rem; dup _12 _13 = _10; let qr = (Bool_if (U120_gte _11 _3) let quo = (U120_setb _16 _15);
    let rem = (- _12 _4);
    {T2 quo rem} {T2 _17 _13});
    (U120_dm_go (U120_decs _7) qr _1 _5)
}

// U60.to_u120 (num: U60) : (U120)
fun (U60_tu120 num) {
  (U60_tu120 num) =
    (U120_new #0 num)
}

// U120.inc (n: (U120)) : (U120)
fun (U120_inc n) {
  (U120_inc n) =
    (+ n #1)
}

// U120.greater_equal (a: (U120)) (b: (U120)) : (Bool)
fun (U120_gte a b) {
  (U120_gte a b) =
    (U120_tbool (>= a b))
}

// U120.to_bool (n: (U120)) : (Bool)
fun (U120_tbool n) {
  (U120_tbool #0) =
    {Bool_false}
  (U120_tbool ~) =
    {Bool_true}
}

// U120.dec (num: (U120)) : (U120)
fun (U120_decs num) {
  (U120_decs num) =
    (- num #1)
}

// Maybe.match -(t: Type) (x: (Maybe t)) -(p: (x: (Maybe t)) Type) (none: (p (Maybe.none t))) (some: (value: t) (p (Maybe.some t value))) : (p x)
fun (Maybe_match x none some) {
  (Maybe_match {Maybe_none} none ~) =
    none
  (Maybe_match {Maybe_some value_} ~ some) =
    (!some value_)
}

// Maybe.some -(t: Type) (value: t) : (Maybe t)
ctr {Maybe_some value}

// Maybe.none -(t: Type) : (Maybe t)
ctr {Maybe_none}

// U120.msb (n: (U120)) : (Maybe (U120))
fun (U120_msb n) {
  (U120_msb #0) =
    {Maybe_none}
  (U120_msb n) =
    {Maybe_some (- (U120_msb_go n) #1)}
}

// U120.msb.go (n: (U120)) : (U120)
fun (U120_msb_go n) {
  (U120_msb_go #0) =
    #0
  (U120_msb_go n) =
    (+ #1 (U120_msb_go (>> n #1)))
}

// U120.get_bit (num: (U120)) (bit: (U120)) : (U120)
fun (U120_getb num bit) {
  (U120_getb num bit) =
    (& (>> num bit) #1)
}

// U120.set_bit (num: (U120)) (bit: (U120)) : (U120)
fun (U120_setb num bit) {
  (U120_setb num bit) =
    let bit = (<< #1 bit);
    (| num bit)
}

// Data.BaseTree.Base.Bin.1 -(r: Type) (pred: r) : (Data.BaseTree.Base.Bin r)
ctr {Bt_base_b1 pred}

// Data.BaseTree.Base.Bin.0 -(r: Type) (pred: r) : (Data.BaseTree.Base.Bin r)
ctr {Bt_base_b0 pred}

fun (Bt_got0_ x0 x1 x2 x3 x4) {
  (Bt_got0_ {Bt_base2} bs ks b0 b1) =
    (Pair_match (Bt_got bs ks b0) @res.fst @res.snd {T2 {Bt_bin_tie res.fst b1} res.snd})
}

fun (Bt_got1_ x0 x1 x2 x3 x4) {
  (Bt_got1_ {Bt_base2} bs ks b0 b1) =
    (Pair_match (Bt_got bs ks b1) @res.fst @res.snd {T2 {Bt_bin_tie b0 res.fst} res.snd})
}

fun (Bt_got2_ x0 x1 x2 x3 x4 x5 x6 x7) {
  (Bt_got2_ {Bt_base5} bs ks b0 b1 b2 b3 b4) =
    (Pair_match (Bt_got bs ks b0) @res.fst @res.snd {T2 {Bt_qui_tie res.fst b1 b2 b3 b4} res.snd})
}

fun (Bt_got3_ x0 x1 x2 x3 x4 x5 x6 x7) {
  (Bt_got3_ {Bt_base5} bs ks b0 b1 b2 b3 b4) =
    (Pair_match (Bt_got bs ks b1) @res.fst @res.snd {T2 {Bt_qui_tie b0 res.fst b2 b3 b4} res.snd})
}

fun (Bt_got4_ x0 x1 x2 x3 x4 x5 x6 x7) {
  (Bt_got4_ {Bt_base5} bs ks b0 b1 b2 b3 b4) =
    (Pair_match (Bt_got bs ks b2) @res.fst @res.snd {T2 {Bt_qui_tie b0 b1 res.fst b3 b4} res.snd})
}

fun (Bt_got5_ x0 x1 x2 x3 x4 x5 x6 x7) {
  (Bt_got5_ {Bt_base5} bs ks b0 b1 b2 b3 b4) =
    (Pair_match (Bt_got bs ks b3) @res.fst @res.snd {T2 {Bt_qui_tie b0 b1 b2 res.fst b4} res.snd})
}

fun (Bt_got6_ x0 x1 x2 x3 x4 x5 x6 x7) {
  (Bt_got6_ {Bt_base5} bs ks b0 b1 b2 b3 b4) =
    (Pair_match (Bt_got bs ks b4) @res.fst @res.snd {T2 {Bt_qui_tie b0 b1 b2 b3 res.fst} res.snd})
}

// Data.BaseTree.got -(v: Type) (bases: (List (Data.BaseTree.Base))) (key: (Data.BaseTree.Key bases)) (map: (Data.BaseTree bases v)) : (Pair (Data.BaseTree bases v) v)
fun (Bt_got bases key map) {
  (Bt_got {List_nil} {T0} val) =
    dup _0 _1 = val; {T2 _0 _1}
  (Bt_got {List_cons .0 bs} {Bt_base_b0 ks} {Bt_bin_tie b0 b1}) =
    (Bt_got0_ .0 bs ks b0 b1)
  (Bt_got {List_cons .0 bs} {Bt_base_b1 ks} {Bt_bin_tie b0 b1}) =
    (Bt_got1_ .0 bs ks b0 b1)
  (Bt_got {List_cons .0 bs} {Bt_base_q0 ks} {Bt_qui_tie b0 b1 b2 b3 b4}) =
    (Bt_got2_ .0 bs ks b0 b1 b2 b3 b4)
  (Bt_got {List_cons .0 bs} {Bt_base_q1 ks} {Bt_qui_tie b0 b1 b2 b3 b4}) =
    (Bt_got3_ .0 bs ks b0 b1 b2 b3 b4)
  (Bt_got {List_cons .0 bs} {Bt_base_q2 ks} {Bt_qui_tie b0 b1 b2 b3 b4}) =
    (Bt_got4_ .0 bs ks b0 b1 b2 b3 b4)
  (Bt_got {List_cons .0 bs} {Bt_base_q3 ks} {Bt_qui_tie b0 b1 b2 b3 b4}) =
    (Bt_got5_ .0 bs ks b0 b1 b2 b3 b4)
  (Bt_got {List_cons .0 bs} {Bt_base_q4 ks} {Bt_qui_tie b0 b1 b2 b3 b4}) =
    (Bt_got6_ .0 bs ks b0 b1 b2 b3 b4)
}

// Data.BaseTree.Base.Qui.2 -(r: Type) (pred: r) : (Data.BaseTree.Base.Qui r)
ctr {Bt_base_q2 pred}

// Data.BaseTree.Base.Qui.4 -(r: Type) (pred: r) : (Data.BaseTree.Base.Qui r)
ctr {Bt_base_q4 pred}

// Data.BaseTree.Base.Qui.0 -(r: Type) (pred: r) : (Data.BaseTree.Base.Qui r)
ctr {Bt_base_q0 pred}

// Data.BaseTree.Base.Qui.1 -(r: Type) (pred: r) : (Data.BaseTree.Base.Qui r)
ctr {Bt_base_q1 pred}

// Data.BaseTree.Base.Qui.3 -(r: Type) (pred: r) : (Data.BaseTree.Base.Qui r)
ctr {Bt_base_q3 pred}

// Apps.Fib.Player.pos.get_y (player: (Apps.Fib.Player)) : (U120)
fun (Fib_plr_p_gy player) {
  (Fib_plr_p_gy player) =
    (Fib_g_u120 player #8 #8)
}

// Apps.Fib.get_in_u120 (chunk: (U120)) (pos: (U120)) (size: (U120)) : (U120)
fun (Fib_g_u120 chunk pos size) {
  (Fib_g_u120 chunk pos size) =
    let mask = (- (<< #1 size) #1);
    let num = (& (>> chunk pos) mask);
    num
}

// Apps.Fib.Pos.new (x: (U120)) (y: (U120)) : (Apps.Fib.Pos)
fun (Fib_pos_new x y) {
  (Fib_pos_new x y) =
    dup _2 _3 = x; dup _0 _1 = y; let x.val = (% _2 #160);
    dup _10 _11 = x.val; dup _12 _13 = _10; let y.val = (% _0 #160);
    dup _6 _7 = y.val; dup _8 _9 = _6; let e0 = {U120_mod_ilt _3 #160 (Fib_pos_160n)};
    dup _4 _5 = e0; let e1 = {U120_mod_ilt _1 #160 (Fib_pos_160n)};
    {Sigma_new (Fib_pos_vnew _11 _7) {T2 (Fib_pos_vivx _12 _8 _4) (Fib_pos_vivy _13 _9 _5 e1)}}
}

// Pos.160_is_not_0 : (Not (Equal (U120) (U120.new 0 160) (U120.new 0 0)))
fun (Fib_pos_160n) {
  (Fib_pos_160n) =
    @absurd (Equal_rewrt absurd {T0})
}

// Sigma.new -(a: Type) -(b: (_: a) Type) (fst: a) (snd: (b fst)) : (Sigma a b)
ctr {Sigma_new fst snd}

// Equal.rewrite -(t: Type) -(a: t) -(b: t) (e: (Equal t a b)) -(p: (_: t) Type) (x: (p a)) : (p b)
fun (Equal_rewrt e x) {
  (Equal_rewrt {Equal_refl} x) =
    x
}

// Equal.refl -(t: Type) -(a: t) : (Equal t a a)
ctr {Equal_refl}

// Apps.Fib.Pos.Value.IsValid.x (x: (U120)) (y: (U120)) (e0: (Equal (Bool) (U120.less_than x (U120.new 0 160)) (Bool.true))) : (Equal (Bool) (U120.less_than (U120.bitwise_and (U120.bitwise_or (U120.shift_left y (U120.new 0 8)) x) (U120.new 0 255)) (U120.new 0 160)) (Bool.true))
fun (Fib_pos_vivx x y e0) {
  (Fib_pos_vivx x y e0) =
    dup _2 _3 = x; dup _4 _5 = _2; dup _6 _7 = _3; dup _8 _9 = _4; dup _0 _1 = y; let e1 = {U120_and_po (<< _0 #8) _5 #255};
    let e2 = {U120_sl_mz _1 #8};
    let e1.1 = (Equal_rewrt e2 e1);
    let e3 = {U120_or_zl (& _6 #255)};
    let e1.2 = (Equal_rewrt e3 e1.1);
    let e4 = {U120_and_lea _7 #255};
    let e5 = {U120_ile_clt (& _8 #255) _9 #160 e4 e0};
    let e5.1 = (Equal_rewrt (Equal_mirr e1.2) e5);
    e5.1
}

// U120.IsLessEqual.chain.less_than (a: (U120)) (b: (U120)) (c: (U120)) (e0: (U120.IsLessEqual a b)) (e1: (U120.IsLessThan b c)) : (U120.IsLessThan a c)
ctr {U120_ile_clt a b c e0 e1}

// U120.less_equal (a: (U120)) (b: (U120)) : (Bool)
fun (U120_lte a b) {
  (U120_lte a b) =
    (U120_tbool (<= a b))
}

// U120.less_than (a: (U120)) (b: (U120)) : (Bool)
fun (U120_ltn a b) {
  (U120_ltn a b) =
    (U120_tbool (< a b))
}

// U120.shift_left.mask_zero (a: (U120)) (s: (U120)) : (let a = (U120.bitwise_and (U120.shift_left a s) (U120.sub (U120.shift_left (U120.new 0 1) s) (U120.new 0 1))); (let b = (U120.new 0 0); (Equal (U120) a b)))
ctr {U120_sl_mz a s}

// U120.and.less_equal_a (a: (U120)) (b: (U120)) : (U120.IsLessEqual (U120.bitwise_and a b) a)
ctr {U120_and_lea a b}

// U120.or.zero_left (a: (U120)) : (Equal (U120) (U120.bitwise_or (U120.new 0 0) a) a)
ctr {U120_or_zl a}

// U120.and.pass_or (a: (U120)) (b: (U120)) (c: (U120)) : (let x = (U120.bitwise_and (U120.bitwise_or a b) c); (let y = (U120.bitwise_or (U120.bitwise_and a c) (U120.bitwise_and b c)); (Equal (U120) x y)))
ctr {U120_and_po a b c}

// Equal.mirror -(t: Type) -(a: t) -(b: t) (e: (Equal t a b)) : (Equal t b a)
fun (Equal_mirr e) {
  (Equal_mirr {Equal_refl}) =
    {Equal_refl}
}

// Apps.Fib.Pos.Value.IsValid.y (x: (U120)) (y: (U120)) (e0: (Equal (Bool) (U120.less_than x (U120.new 0 160)) (Bool.true))) (e1: (Equal (Bool) (U120.less_than y (U120.new 0 160)) (Bool.true))) : (Equal (Bool) (U120.less_than (U120.shift_right (U120.bitwise_or (U120.shift_left y (U120.new 0 8)) x) (U120.new 0 8)) (U120.new 0 160)) (Bool.true))
fun (Fib_pos_vivy x y e0 e1) {
  (Fib_pos_vivy x y e0 e1) =
    dup _8 _9 = x; dup _10 _11 = _8; dup _0 _1 = y; dup _2 _3 = _0; dup _4 _5 = _1; dup _6 _7 = _2; let e2 = {U120_ilt_clt _9 #160 #256 e0 {Equal_refl}};
    let e3 = {U120_sr_zlel _10 #8 e2};
    let e4 = {U120_sr_psor (<< _3 #8) _11 #8};
    let e4.1 = (Equal_rewrt e3 e4);
    let e5 = {U120_or_zr (>> (<< _4 #8) #8)};
    let e4.2 = (Equal_rewrt e5 e4.1);
    let e6 = {U120_sr_slle _5 #8};
    let e7 = {U120_ile_clt (>> (<< _6 #8) #8) _7 #160 e6 e1};
    let e7.1 = (Equal_rewrt (Equal_mirr e4.2) e7);
    e7.1
}

// U120.shift_right.zero_if_less_equal_length (a: (U120)) (b: (U120)) (e0: (Equal (Bool) (U120.less_than a (U120.shift_left (U120.new 0 1) b)) (Bool.true))) : (Equal (U120) (U120.shift_right a b) (U120.new 0 0))
ctr {U120_sr_zlel a b e0}

// U120.or.zero_right (a: (U120)) : (Equal (U120) (U120.bitwise_or a (U120.new 0 0)) a)
ctr {U120_or_zr a}

// U120.IsLessThan.chain.less_than (a: (U120)) (b: (U120)) (c: (U120)) (e0: (U120.IsLessThan a b)) (e1: (U120.IsLessThan b c)) : (U120.IsLessThan a c)
ctr {U120_ilt_clt a b c e0 e1}

// U120.shift_right.pass_or (a: (U120)) (b: (U120)) (c: (U120)) : (let x = (U120.shift_right (U120.bitwise_or a b) c); (let y = (U120.bitwise_or (U120.shift_right a c) (U120.shift_right b c)); (Equal (U120) x y)))
ctr {U120_sr_psor a b c}

// U120.shift_right.shl_less_equal (a: (U120)) (b: (U120)) : (Equal (Bool) (U120.less_equal (U120.shift_right (U120.shift_left a b) b) a) (Bool.true))
ctr {U120_sr_slle a b}

// Apps.Fib.Pos.Value.get_y (val: (U120)) : (U120)
fun (Fib_pos_v_gy val) {
  (Fib_pos_v_gy val) =
    (>> val #8)
}

// Apps.Fib.Pos.Value.get_x (val: (U120)) : (U120)
fun (Fib_pos_v_gx val) {
  (Fib_pos_v_gx val) =
    (& val #255)
}

// Apps.Fib.Pos.Value.new (x: (U120)) (y: (U120)) : _
fun (Fib_pos_vnew x y) {
  (Fib_pos_vnew x y) =
    (| (<< y #8) x)
}

// U120.equal (a: (U120)) (b: (U120)) : (Bool)
fun (U120_equal a b) {
  (U120_equal a b) =
    (U120_tbool (== a b))
}

// U120.mod.is_less_than (a: (U120)) (b: (U120)) (e: (Not (Equal (U120) b (U120.new 0 0)))) : (U120.IsLessThan (U120.mod a b) b)
ctr {U120_mod_ilt a b e}

// Apps.Fib.Player.pos.get_x (player: (Apps.Fib.Player)) : (U120)
fun (Fib_plr_p_gx player) {
  (Fib_plr_p_gx player) =
    (Fib_g_u120 player #0 #8)
}

// Apps.Fib.Table.set (map: (Apps.Fib.Table)) (entity: (Apps.Fib.Entity)) (id: (Apps.Fib.Id)) : (Apps.Fib.Table)
fun (Fib_tbl_set map entity id) {
  (Fib_tbl_set map entity id) =
    (Bt_set (Fib_tbl_bses) (Fib_tbl_fid id) map entity)
}

fun (Bt_set0_ x0 x1 x2 x3 x4 x5) {
  (Bt_set0_ {Bt_base2} bs ks b0 b1 val) =
    {Bt_bin_tie (Bt_set bs ks b0 val) b1}
}

fun (Bt_set1_ x0 x1 x2 x3 x4 x5) {
  (Bt_set1_ {Bt_base2} bs ks b0 b1 val) =
    {Bt_bin_tie b0 (Bt_set bs ks b1 val)}
}

fun (Bt_set2_ x0 x1 x2 x3 x4 x5 x6 x7 x8) {
  (Bt_set2_ {Bt_base5} bs ks b0 b1 b2 b3 b4 val) =
    {Bt_qui_tie (Bt_set bs ks b0 val) b1 b2 b3 b4}
}

fun (Bt_set3_ x0 x1 x2 x3 x4 x5 x6 x7 x8) {
  (Bt_set3_ {Bt_base5} bs ks b0 b1 b2 b3 b4 val) =
    {Bt_qui_tie b0 (Bt_set bs ks b1 val) b2 b3 b4}
}

fun (Bt_set4_ x0 x1 x2 x3 x4 x5 x6 x7 x8) {
  (Bt_set4_ {Bt_base5} bs ks b0 b1 b2 b3 b4 val) =
    {Bt_qui_tie b0 b1 (Bt_set bs ks b2 val) b3 b4}
}

fun (Bt_set5_ x0 x1 x2 x3 x4 x5 x6 x7 x8) {
  (Bt_set5_ {Bt_base5} bs ks b0 b1 b2 b3 b4 val) =
    {Bt_qui_tie b0 b1 b2 (Bt_set bs ks b3 val) b4}
}

fun (Bt_set6_ x0 x1 x2 x3 x4 x5 x6 x7 x8) {
  (Bt_set6_ {Bt_base5} bs ks b0 b1 b2 b3 b4 val) =
    {Bt_qui_tie b0 b1 b2 b3 (Bt_set bs ks b4 val)}
}

// Data.BaseTree.set -(v: Type) (bases: (List (Data.BaseTree.Base))) (key: (Data.BaseTree.Key bases)) (map: (Data.BaseTree bases v)) (val: v) : (Data.BaseTree bases v)
fun (Bt_set bases key map val) {
  (Bt_set {List_nil} {T0} ~ val) =
    val
  (Bt_set {List_cons .0 bs} {Bt_base_b0 ks} {Bt_bin_tie b0 b1} val) =
    (Bt_set0_ .0 bs ks b0 b1 val)
  (Bt_set {List_cons .0 bs} {Bt_base_b1 ks} {Bt_bin_tie b0 b1} val) =
    (Bt_set1_ .0 bs ks b0 b1 val)
  (Bt_set {List_cons .0 bs} {Bt_base_q0 ks} {Bt_qui_tie b0 b1 b2 b3 b4} val) =
    (Bt_set2_ .0 bs ks b0 b1 b2 b3 b4 val)
  (Bt_set {List_cons .0 bs} {Bt_base_q1 ks} {Bt_qui_tie b0 b1 b2 b3 b4} val) =
    (Bt_set3_ .0 bs ks b0 b1 b2 b3 b4 val)
  (Bt_set {List_cons .0 bs} {Bt_base_q2 ks} {Bt_qui_tie b0 b1 b2 b3 b4} val) =
    (Bt_set4_ .0 bs ks b0 b1 b2 b3 b4 val)
  (Bt_set {List_cons .0 bs} {Bt_base_q3 ks} {Bt_qui_tie b0 b1 b2 b3 b4} val) =
    (Bt_set5_ .0 bs ks b0 b1 b2 b3 b4 val)
  (Bt_set {List_cons .0 bs} {Bt_base_q4 ks} {Bt_qui_tie b0 b1 b2 b3 b4} val) =
    (Bt_set6_ .0 bs ks b0 b1 b2 b3 b4 val)
}

// Apps.Fib.Map.set (map: (Apps.Fib.Map)) (id: (Apps.Fib.Id)) (pos: (Apps.Fib.Pos)) : (Apps.Fib.Map)
fun (Fib_map_set map id pos) {
  (Fib_map_set map id pos) =
    let keys = (Fib_map_kfps pos);
    dup _0 _1 = keys; let key = (Pair_fst _0);
    let idx = (Pair_snd _1);
    let func = @chunk (Fib_s_u120 (* idx #12) id chunk);
    (Bt_mut (Fib_map_base) map key func)
}

// Apps.Fib.Map.Key.from_pos (pos: (Apps.Fib.Pos)) : (Pair (Apps.Fib.Map.Key) (U120))
fun (Fib_map_kfps pos) {
  (Fib_map_kfps pos) =
    dup _0 _1 = pos; let x = (Fib_pos_g_x _0);
    dup _2 _3 = x; let y = (Fib_pos_g_y _1);
    let key = (U120_low (+ (/ _2 #10) (* y #16)));
    {T2 (Bt_key_fu60 (Fib_map_base) #2560 (% key #2560)) (% _3 #10)}
}

// Apps.Fib.Pos.get_y (pos: (Apps.Fib.Pos)) : (U120)
fun (Fib_pos_g_y pos) {
  (Fib_pos_g_y pos) =
    (>> (Sigma_fst pos) #8)
}

// Sigma.fst -(a: Type) -(b: (_: a) Type) (s: (Sigma a b)) : a
fun (Sigma_fst s) {
  (Sigma_fst {Sigma_new x ~}) =
    x
}

// Apps.Fib.Pos.get_x (pos: (Apps.Fib.Pos)) : (U120)
fun (Fib_pos_g_x pos) {
  (Fib_pos_g_x pos) =
    (& (Sigma_fst pos) #255)
}

// Data.BaseTree.Key.from_u60.base5 (t: (List (Data.BaseTree.Base))) (q: U60) (m: U60) (n: U60) : (Data.BaseTree.Base.Qui (Data.BaseTree.Key t))
fun (Bt_key_fu605 t q m n) {
  (Bt_key_fu605 t #0 m n) =
    {Bt_base_q0 (Bt_key_fu60 t m n)}
  (Bt_key_fu605 t #1 m n) =
    {Bt_base_q1 (Bt_key_fu60 t m n)}
  (Bt_key_fu605 t #2 m n) =
    {Bt_base_q2 (Bt_key_fu60 t m n)}
  (Bt_key_fu605 t #3 m n) =
    {Bt_base_q3 (Bt_key_fu60 t m n)}
  (Bt_key_fu605 t #4 m n) =
    {Bt_base_q4 (Bt_key_fu60 t m n)}
}

// Data.BaseTree.Key.from_u60.base2 (t: (List (Data.BaseTree.Base))) (q: U60) (m: U60) (n: U60) : (Data.BaseTree.Base.Bin (Data.BaseTree.Key t))
fun (Bt_key_fu602 t q m n) {
  (Bt_key_fu602 t #0 m n) =
    {Bt_base_b0 (Bt_key_fu60 t m n)}
  (Bt_key_fu602 t #1 m n) =
    {Bt_base_b1 (Bt_key_fu60 t m n)}
}

fun (Bt_key_fuk_t x0 x1 x2 x3) {
  (Bt_key_fuk_t {Bt_base2} t m n) =
    dup _0 _1 = n; let m = (/ m #2);
    dup _4 _5 = m; dup _6 _7 = _4; let d = (/ _0 _5);
    dup _2 _3 = d; let n = (- _1 (* _2 _6));
    (Bt_key_fu602 t _3 _7 n)
  (Bt_key_fuk_t {Bt_base5} t m n) =
    dup _0 _1 = n; let m = (/ m #5);
    dup _4 _5 = m; dup _6 _7 = _4; let d = (/ _0 _5);
    dup _2 _3 = d; let n = (- _1 (* _2 _6));
    (Bt_key_fu605 t _3 _7 n)
}

// Data.BaseTree.Key.from_u60 (bases: (List (Data.BaseTree.Base))) (m: U60) (n: U60) : (Data.BaseTree.Key bases)
fun (Bt_key_fu60 bases m n) {
  (Bt_key_fu60 {List_nil} ~ ~) =
    {T0}
  (Bt_key_fu60 {List_cons .0 t} m n) =
    (Bt_key_fuk_t .0 t m n)
}

// Apps.Fib.set_in_u120 (x: (U120)) (id: (Apps.Fib.Id)) (chunk: (U120)) : (U120)
fun (Fib_s_u120 x id chunk) {
  (Fib_s_u120 x id chunk) =
    let shl = @n (<< n x);
    dup _0 _1 = shl; let res = (| (& (U120_bwcom (!_0 #4095)) chunk) (!_1 id));
    res
}

fun (Bt_mut0_ x0 x1 x2 x3 x4 x5) {
  (Bt_mut0_ {Bt_base2} tail b0 b1 key func) =
    {Bt_bin_tie (Bt_mut tail b0 key func) b1}
}

fun (Bt_mut1_ x0 x1 x2 x3 x4 x5) {
  (Bt_mut1_ {Bt_base2} tail b0 b1 key func) =
    {Bt_bin_tie b0 (Bt_mut tail b1 key func)}
}

fun (Bt_mut2_ x0 x1 x2 x3 x4 x5 x6 x7 x8) {
  (Bt_mut2_ {Bt_base5} tail b0 b1 b2 b3 b4 key func) =
    {Bt_qui_tie (Bt_mut tail b0 key func) b1 b2 b3 b4}
}

fun (Bt_mut3_ x0 x1 x2 x3 x4 x5 x6 x7 x8) {
  (Bt_mut3_ {Bt_base5} tail b0 b1 b2 b3 b4 key func) =
    {Bt_qui_tie b0 (Bt_mut tail b1 key func) b2 b3 b4}
}

fun (Bt_mut4_ x0 x1 x2 x3 x4 x5 x6 x7 x8) {
  (Bt_mut4_ {Bt_base5} tail b0 b1 b2 b3 b4 key func) =
    {Bt_qui_tie b0 b1 (Bt_mut tail b2 key func) b3 b4}
}

fun (Bt_mut5_ x0 x1 x2 x3 x4 x5 x6 x7 x8) {
  (Bt_mut5_ {Bt_base5} tail b0 b1 b2 b3 b4 key func) =
    {Bt_qui_tie b0 b1 b2 (Bt_mut tail b3 key func) b4}
}

fun (Bt_mut6_ x0 x1 x2 x3 x4 x5 x6 x7 x8) {
  (Bt_mut6_ {Bt_base5} tail b0 b1 b2 b3 b4 key func) =
    {Bt_qui_tie b0 b1 b2 b3 (Bt_mut tail b4 key func)}
}

// Data.BaseTree.mut -(val: Type) (bases: (List (Data.BaseTree.Base))) (map: (Data.BaseTree bases val)) (key: (Data.BaseTree.Key bases)) (func: (_: val) val) : (Data.BaseTree bases val)
fun (Bt_mut bases map key func) {
  (Bt_mut {List_nil} end ~ func) =
    (!func end)
  (Bt_mut {List_cons .0 tail} {Bt_bin_tie b0 b1} {Bt_base_b0 key} func) =
    (Bt_mut0_ .0 tail b0 b1 key func)
  (Bt_mut {List_cons .0 tail} {Bt_bin_tie b0 b1} {Bt_base_b1 key} func) =
    (Bt_mut1_ .0 tail b0 b1 key func)
  (Bt_mut {List_cons .0 tail} {Bt_qui_tie b0 b1 b2 b3 b4} {Bt_base_q0 key} func) =
    (Bt_mut2_ .0 tail b0 b1 b2 b3 b4 key func)
  (Bt_mut {List_cons .0 tail} {Bt_qui_tie b0 b1 b2 b3 b4} {Bt_base_q1 key} func) =
    (Bt_mut3_ .0 tail b0 b1 b2 b3 b4 key func)
  (Bt_mut {List_cons .0 tail} {Bt_qui_tie b0 b1 b2 b3 b4} {Bt_base_q2 key} func) =
    (Bt_mut4_ .0 tail b0 b1 b2 b3 b4 key func)
  (Bt_mut {List_cons .0 tail} {Bt_qui_tie b0 b1 b2 b3 b4} {Bt_base_q3 key} func) =
    (Bt_mut5_ .0 tail b0 b1 b2 b3 b4 key func)
  (Bt_mut {List_cons .0 tail} {Bt_qui_tie b0 b1 b2 b3 b4} {Bt_base_q4 key} func) =
    (Bt_mut6_ .0 tail b0 b1 b2 b3 b4 key func)
}

// Apps.Fib.Map.got (map: (Apps.Fib.Map)) (pos: (Apps.Fib.Pos)) : (Pair (Apps.Fib.Map) (Apps.Fib.Id))
fun (Fib_map_got map pos) {
  (Fib_map_got map pos) =
    let keys = (Fib_map_kfps pos);
    (Pair_match keys @keys.fst @keys.snd let p = (Bt_got (Fib_map_base) keys.fst map);
    (Pair_match p @p.fst @p.snd {T2 p.fst (Fib_map_gtil p.snd keys.snd)}))
}

// Apps.Fib.Map.get_tile (chunk: (U120)) (idx: (U120)) : (Apps.Fib.Id)
fun (Fib_map_gtil chunk idx) {
  (Fib_map_gtil chunk idx) =
    (& (>> chunk (* idx #12)) #4095)
}

// Apps.Fib.State.create_monster (state: (Apps.Fib.State)) (init: (Apps.Fib.Entity)) (id: (Apps.Fib.Id)) : (Apps.Fib.State)
fun (Fib_st_crtm state init id) {
  (Fib_st_crtm state init id) =
    dup _0 _1 = init; dup _2 _3 = _0; let x = (Fib_plr_p_gx _1);
    let y = (Fib_plr_p_gy _2);
    (Fib_st_crtu state _3 (Fib_pos_new x y) id)
}

// Apps.Fib.State.create_unit (state: (Apps.Fib.State)) (init: (Apps.Fib.Entity)) (pos: (Apps.Fib.Pos)) (id: (Apps.Fib.Id)) : (Apps.Fib.State)
fun (Fib_st_crtu state init pos id) {
  (Fib_st_crtu {Fib_st_new map table} init pos id) =
    dup _6 _7 = pos; dup _4 _5 = table; dup _2 _3 = map; dup _0 _1 = id; let tile = (Fib_map_got _2 _6);
    (Pair_match tile @tile.fst @tile.snd (Bool_if (U120_is0 tile.snd) let map = (Fib_map_set tile.fst _0 _7);
    let func = @x dup _8 _9 = x; (Bool_if (U120_is0 _8) init _9);
    let table = (Fib_tbl_mut _4 func _1);
    {Fib_st_new map table} {Fib_st_new _3 _5}))
}

// U120.is_zero (n: (U120)) : (Bool)
fun (U120_is0 n) {
  (U120_is0 #0) =
    {Bool_true}
  (U120_is0 ~) =
    {Bool_false}
}

// Apps.Fib.Table.mut (table: (Apps.Fib.Table)) (func: (_: (Apps.Fib.Entity)) (Apps.Fib.Entity)) (id: (Apps.Fib.Id)) : (Apps.Fib.Table)
fun (Fib_tbl_mut table func id) {
  (Fib_tbl_mut table func id) =
    (Bt_mut (Fib_tbl_bses) table (Fib_tbl_fid id) func)
}

// Apps.Fib.kindelia.Act.next (code: (U120)) : (Apps.Fib.kindelia.Act)
ctr {Fib_kdl_a_n code}

// Apps.Fib.State.parse (state: (Apps.Fib.State)) : (Apps.Fib.State.Parsed)
fun (Fib_st_parse state) {
  (Fib_st_parse state) =
    let func = (Apps_Fib_umE #0 #0 (Fib_tbl_bses) (Apps_Fib_zsK state));
    (!func {Fib_st_parsd {List_nil} {List_nil} {List_nil}})
}

fun (Apps_Fib_HcY x0 x1 x2 x3 x4 x5) {
  (Apps_Fib_HcY depth id {Bt_base2} tail lft rgt) =
    dup _4 _5 = id; dup _2 _3 = depth; dup _0 _1 = tail; @x let new_depth = (U120_inc _2);
    dup _6 _7 = new_depth; let a = (Apps_Fib_umE _6 _4 _0 lft);
    let b = (Apps_Fib_umE _7 (| _5 (<< #1 _3)) _1 rgt);
    (!a (!b x))
}

// Apps.Fib.State.parse.table (depth: (U120)) (id: (U120)) (bases: (List (Data.BaseTree.Base))) (map: (Data.BaseTree bases (U120))) : (_: (Apps.Fib.State.Parsed)) (Apps.Fib.State.Parsed)
fun (Apps_Fib_umE depth id bases map) {
  (Apps_Fib_umE ~ ~ {List_nil} #0) =
    @x x
  (Apps_Fib_umE ~ id {List_nil} entity) =
    dup _0 _1 = id; (Apps_Fib_pQ2 (U120_log2 _0) _1 entity)
  (Apps_Fib_umE depth id {List_cons .0 tail} {Bt_bin_tie lft rgt}) =
    (Apps_Fib_HcY depth id .0 tail lft rgt)
}

// Apps.Fib.State.parse.id (type: (U120)) (id: (Apps.Fib.Id)) (entity: (Apps.Fib.Entity)) : (_: (Apps.Fib.State.Parsed)) (Apps.Fib.State.Parsed)
fun (Apps_Fib_pQ2 type id entity) {
  (Apps_Fib_pQ2 #7 id entity) =
    @x let npc = (Apps_Fib_ZBv id entity);
    (Apps_Fib_KpL npc x)
  (Apps_Fib_pQ2 #8 ~ ~) =
    @x x
  (Apps_Fib_pQ2 #9 id entity) =
    @x let monster = (Apps_Fib_6jW id entity);
    (Apps_Fib_WCp monster x)
  (Apps_Fib_pQ2 #10 ~ entity) =
    @x let player = (Fib_plr_show entity);
    (Apps_Fib_Mev player x)
  (Apps_Fib_pQ2 #11 ~ entity) =
    @x let player = (Fib_plr_show entity);
    (Apps_Fib_Mev player x)
  (Apps_Fib_pQ2 ~ ~ ~) =
    @x x
}

// Apps.Fib.State.parse.join_npc (npc: (List (Pair (String) (String)))) (b: (Apps.Fib.State.Parsed)) : (Apps.Fib.State.Parsed)
fun (Apps_Fib_KpL npc b) {
  (Apps_Fib_KpL npc {Fib_st_parsd n m p}) =
    {Fib_st_parsd {List_cons npc n} m p}
}

// Apps.Fib.State.parse.join_monster (monster: (List (Pair (String) (String)))) (b: (Apps.Fib.State.Parsed)) : (Apps.Fib.State.Parsed)
fun (Apps_Fib_WCp monster b) {
  (Apps_Fib_WCp monster {Fib_st_parsd n m p}) =
    {Fib_st_parsd n {List_cons monster m} p}
}

// Apps.Fib.State.parse.join_player (player: (List (Pair (String) (String)))) (b: (Apps.Fib.State.Parsed)) : (Apps.Fib.State.Parsed)
fun (Apps_Fib_Mev player b) {
  (Apps_Fib_Mev player {Fib_st_parsd n m p}) =
    {Fib_st_parsd n m {List_cons player p}}
}

// Apps.Fib.State.parse.id_07 (id: (Apps.Fib.Id)) (entity: (Apps.Fib.Entity)) : (List (Pair (String) (String)))
fun (Apps_Fib_ZBv id entity) {
  (Apps_Fib_ZBv #128 entity) =
    (Apps_Fib_Rm4 #128 entity)
  (Apps_Fib_ZBv #129 entity) =
    (Apps_Fib_Rm4 #129 entity)
  (Apps_Fib_ZBv #130 entity) =
    (Apps_Fib_Rm4 #130 entity)
}

// Apps.Fib.State.parse.id_09 (id: (Apps.Fib.Id)) (entity: (Apps.Fib.Entity)) : (List (Pair (String) (String)))
fun (Apps_Fib_6jW id entity) {
  (Apps_Fib_6jW #512 entity) =
    (Apps_Fib_naf #512 entity)
  (Apps_Fib_6jW #513 entity) =
    (Apps_Fib_naf #513 entity)
  (Apps_Fib_6jW #514 entity) =
    (Apps_Fib_naf #514 entity)
}

// Apps.Fib.Npc.bat_cave.parse (id: (Apps.Fib.Id)) (entity: (Apps.Fib.Entity)) : (List (Pair (String) (String)))
fun (Apps_Fib_Rm4 id entity) {
  (Apps_Fib_Rm4 id entity) =
    {List_cons {T2 {String_cons #116 {String_cons #121 {String_cons #112 {String_cons #101 {String_nil}}}}} {String_cons #98 {String_cons #97 {String_cons #116 {String_cons #32 {String_cons #99 {String_cons #97 {String_cons #118 {String_cons #101 {String_nil}}}}}}}}}} {List_cons {T2 {String_cons #105 {String_cons #100 {String_nil}}} (!(U120_show (- id #128)) {String_nil})} {List_cons {T2 {String_cons #99 {String_cons #100 {String_nil}}} (!(U120_show entity) {String_nil})} {List_nil}}}}
}

// String.nil : (String)
ctr {String_nil}

// String.cons (head: U60) (tail: (String)) : (String)
ctr {String_cons head tail}

// U120.show (num: (U120)) : (Show)
fun (U120_show num) {
  (U120_show #0) =
    @str {String_cons #48 str}
  (U120_show num) =
    dup _0 _1 = num; @str let ten = #10;
    dup _2 _3 = ten; (Pair_match (U120_dms _0 _2) @dm.fst @dm.snd let digit = (U120_low dm.snd);
    let rest = dm.fst;
    let next = {String_cons (+ #48 digit) str};
    let func = (Bool_if (U120_ltn _1 _3) @h h @h (!(U120_show rest) h));
    (!func next))
}

// Apps.Fib.State.get_table (state: (Apps.Fib.State)) : (Apps.Fib.Table)
fun (Apps_Fib_zsK state) {
  (Apps_Fib_zsK {Fib_st_new ~ tbl}) =
    tbl
}

// Apps.Fib.State.Parsed.new (npcs: (List (Apps.Fib.Thing))) (mons: (List (Apps.Fib.Thing))) (play: (List (Apps.Fib.Thing))) : (Apps.Fib.State.Parsed)
ctr {Fib_st_parsd npcs mons play}

// U120.log2 (n: (U120)) : (U120)
fun (U120_log2 n) {
  (U120_log2 n) =
    (U120_log2_go #0 (>> n #1))
}

// U120.log2.go (count: (U120)) (n: (U120)) : (U120)
fun (U120_log2_go count n) {
  (U120_log2_go count #0) =
    count
  (U120_log2_go count n) =
    (U120_log2_go (U120_inc count) (>> n #1))
}

// Apps.Fib.Player.show (player: (Apps.Fib.Player)) : (List (Pair (String) (String)))
fun (Fib_plr_show player) {
  (Fib_plr_show player) =
    dup _0 _1 = player; dup _2 _3 = _0; dup _4 _5 = _1; dup _6 _7 = _2; dup _8 _9 = _3; dup _10 _11 = _4; dup _12 _13 = _5; dup _14 _15 = _6; dup _16 _17 = _7; dup _18 _19 = _8; dup _20 _21 = _9; dup _22 _23 = _10; dup _24 _25 = _11; dup _26 _27 = _12; dup _28 _29 = _13; {List_cons {T2 {String_cons #120 {String_nil}} (!(U120_show (Fib_plr_p_gx _14)) {String_nil})} {List_cons {T2 {String_cons #121 {String_nil}} (!(U120_show (Fib_plr_p_gy _15)) {String_nil})} {List_cons {T2 {String_cons #104 {String_cons #112 {String_nil}}} (!(U120_show (Fib_plr_hp_g _16)) {String_nil})} {List_cons {T2 {String_cons #120 {String_cons #112 {String_nil}}} (!(U120_show (Fib_plr_xp_g _17)) {String_nil})} {List_cons {T2 {String_cons #114 {String_cons #116 {String_nil}}} (!(U120_show (Fib_plr_rt_g _18)) {String_nil})} {List_cons {T2 {String_cons #115 {String_cons #108 {String_nil}}} (!(U120_show (Fib_plr_sl_g _19)) {String_nil})} {List_cons {T2 {String_cons #103 {String_cons #100 {String_nil}}} (!(U120_show (Fib_plr_gd_g _20)) {String_nil})} {List_cons {T2 {String_cons #99 {String_cons #100 {String_nil}}} (!(U120_show (Fib_plr_cd_g _21)) {String_nil})} {List_cons {T2 {String_cons #115 {String_cons #48 {String_nil}}} (!(U120_show (Fib_plr_sk_g _22 #0)) {String_nil})} {List_cons {T2 {String_cons #115 {String_cons #49 {String_nil}}} (!(U120_show (Fib_plr_sk_g _23 #1)) {String_nil})} {List_cons {T2 {String_cons #115 {String_cons #50 {String_nil}}} (!(U120_show (Fib_plr_sk_g _24 #2)) {String_nil})} {List_cons {T2 {String_cons #115 {String_cons #51 {String_nil}}} (!(U120_show (Fib_plr_sk_g _25 #3)) {String_nil})} {List_cons {T2 {String_cons #115 {String_cons #52 {String_nil}}} (!(U120_show (Fib_plr_sk_g _26 #4)) {String_nil})} {List_cons {T2 {String_cons #115 {String_cons #53 {String_nil}}} (!(U120_show (Fib_plr_sk_g _27 #5)) {String_nil})} {List_cons {T2 {String_cons #115 {String_cons #54 {String_nil}}} (!(U120_show (Fib_plr_sk_g _28 #6)) {String_nil})} {List_cons {T2 {String_cons #115 {String_cons #55 {String_nil}}} (!(U120_show (Fib_plr_sk_g _29 #7)) {String_nil})} {List_nil}}}}}}}}}}}}}}}}}
}

// Apps.Fib.Player.skills.get (player: (Apps.Fib.Player)) (skill_id: (U120)) : (U120)
fun (Fib_plr_sk_g player skill_id) {
  (Fib_plr_sk_g player skill_id) =
    (Fib_g_u120 player (+ #72 (* skill_id #6)) #6)
}

// Apps.Fib.Player.hp.get (player: (Apps.Fib.Player)) : (U120)
fun (Fib_plr_hp_g player) {
  (Fib_plr_hp_g player) =
    (Fib_g_u120 player #16 #14)
}

// Apps.Fib.Player.rt.get (player: (Apps.Fib.Player)) : (U120)
fun (Fib_plr_rt_g player) {
  (Fib_plr_rt_g player) =
    (Fib_g_u120 player #42 #3)
}

// Apps.Fib.Player.gd.get (player: (Apps.Fib.Player)) : (U120)
fun (Fib_plr_gd_g player) {
  (Fib_plr_gd_g player) =
    (Fib_g_u120 player #48 #12)
}

// Apps.Fib.Player.cd.get (player: (Apps.Fib.Player)) : (U120)
fun (Fib_plr_cd_g player) {
  (Fib_plr_cd_g player) =
    (Fib_g_u120 player #48 #12)
}

// Apps.Fib.Player.xp.get (player: (Apps.Fib.Player)) : (U120)
fun (Fib_plr_xp_g player) {
  (Fib_plr_xp_g player) =
    (Fib_g_u120 player #30 #12)
}

// Apps.Fib.Player.sl.get (player: (Apps.Fib.Player)) : (U120)
fun (Fib_plr_sl_g player) {
  (Fib_plr_sl_g player) =
    (Fib_g_u120 player #45 #3)
}

// Apps.Fib.Monster.bat.parse (id: (Apps.Fib.Id)) (entity: (Apps.Fib.Entity)) : (List (Pair (String) (String)))
fun (Apps_Fib_naf id entity) {
  (Apps_Fib_naf id entity) =
    dup _0 _1 = entity; dup _2 _3 = _0; {List_cons {T2 {String_cons #116 {String_cons #121 {String_cons #112 {String_cons #101 {String_nil}}}}} {String_cons #98 {String_cons #97 {String_cons #116 {String_nil}}}}} {List_cons {T2 {String_cons #105 {String_cons #100 {String_nil}}} (!(U120_show (- id #512)) {String_nil})} {List_cons {T2 {String_cons #120 {String_nil}} (!(U120_show (Fib_plr_p_gx _1)) {String_nil})} {List_cons {T2 {String_cons #121 {String_nil}} (!(U120_show (Fib_plr_p_gy _2)) {String_nil})} {List_cons {T2 {String_cons #104 {String_cons #112 {String_nil}}} (!(U120_show (Fib_plr_hp_g _3)) {String_nil})} {List_nil}}}}}}
}

// Apps.Fib.State.Update (state: (Apps.Fib.State)) (action: (U120)) (frame: (U120)) : (Apps.Fib.State)
fun (Fib_st_upd state action frame) {
  (Fib_st_upd {Fib_st_new map tab} action frame) =
    dup _8 _9 = map; dup _4 _5 = action; dup _6 _7 = _4; dup _0 _1 = tab; dup _2 _3 = _0; let data = (Fib_ac_gdata _5);
    dup _18 _19 = data; let comm = (Fib_ac_gcomm _6);
    dup _16 _17 = comm; let id = (Fib_ac_gid _7);
    dup _12 _13 = id; dup _14 _15 = _12; let ent_tab = (Fib_tbl_got _1 _13);
    (Pair_match ent_tab @~ @ent_tab.snd let ent = ent_tab.snd;
    dup _10 _11 = ent; (Bool_if (Bool_and (U120_equal _10 #0) (U120_equal _16 #15)) (Fib_st_crtp {Fib_st_new _8 _2} _14 _18) (Fib_st_updcm {Fib_st_new _9 _3} _17 _19 _15 _11 frame)))
}

// Apps.Fib.State.Update.command (state: (Apps.Fib.State)) (command: (U120)) (data: (U120)) (id: (Apps.Fib.Id)) (ent: (Apps.Fib.Entity)) (frame: (U120)) : (Apps.Fib.State)
fun (Fib_st_updcm state command data id ent frame) {
  (Fib_st_updcm state #0 data id ent ~) =
    (Fib_st_walk state data ent id)
  (Fib_st_updcm state #1 ~ ~ ~ ~) =
    state
  (Fib_st_updcm state #2 data ~ ent ~) =
    (Fib_st_updsk state #0 data ent)
  (Fib_st_updcm state #3 data ~ ent ~) =
    (Fib_st_updsk state #1 data ent)
  (Fib_st_updcm state #4 data ~ ent ~) =
    (Fib_st_updsk state #2 data ent)
  (Fib_st_updcm state #5 data ~ ent ~) =
    (Fib_st_updsk state #3 data ent)
  (Fib_st_updcm state #6 data ~ ent ~) =
    (Fib_st_updsk state #4 data ent)
  (Fib_st_updcm state #7 data ~ ent ~) =
    (Fib_st_updsk state #5 data ent)
  (Fib_st_updcm state #8 data id ent frame) =
    (Fib_st_updit state data id ent frame)
  (Fib_st_updcm state ~ ~ ~ ~ ~) =
    state
}

// Apps.Fib.State.Update.skill (state: (Apps.Fib.State)) (skill_id: (U120)) (data: (U120)) (entity: (Apps.Fib.Entity)) : (Apps.Fib.State)
fun (Fib_st_updsk state skill_id data entity) {
  (Fib_st_updsk state skill_id data entity) =
    dup _6 _7 = state; dup _0 _1 = entity; dup _2 _3 = _0; dup _4 _5 = _1; let skill = (Fib_plr_sk_g _2 skill_id);
    let pos = (Fib_pos_new (Fib_plr_p_gx _3) (Fib_plr_p_gy _4));
    let delta = (Fib_pos_g_xy data);
    (Maybe_match (Fib_pos_mod pos delta) _6 @target.value (Fib_st_appsk _7 skill _5 target.value))
}

// Apps.Fib.Pos.modify (pos: (Apps.Fib.Pos)) (delta: (Pair (U120) (U120))) : (Maybe (Apps.Fib.Pos))
fun (Fib_pos_mod pos delta) {
  (Fib_pos_mod pos delta) =
    let list = (Fib_pos_rnge pos {List_cons delta {List_nil}});
    (List_match list {Maybe_none} @list.head @~ {Maybe_some list.head})
}

// List.head -(a: Type) (xs: (List a)) : (Maybe a)
fun (List_head xs) {
  (List_head {List_nil}) =
    {Maybe_none}
  (List_head {List_cons head ~}) =
    {Maybe_some head}
}

// Apps.Fib.Pos.range (center: (Apps.Fib.Pos)) (deltas: (List (Pair (U120) (U120)))) : (List (Apps.Fib.Pos))
fun (Fib_pos_rnge center deltas) {
  (Fib_pos_rnge ~ {List_nil}) =
    {List_nil}
  (Fib_pos_rnge center {List_cons head tail}) =
    dup _0 _1 = center; dup _2 _3 = _0; (Pair_match head @head.fst @head.snd let validate = @val (U120_ltn val #160);
    dup _10 _11 = validate; let x = (+ (Fib_pos_g_x _1) head.fst);
    dup _8 _9 = x; let y = (+ (Fib_pos_g_y _2) head.snd);
    dup _6 _7 = y; let is_valid = (Bool_and (!_10 _8) (!_11 _6));
    let go = (Fib_pos_rnge _3 tail);
    dup _4 _5 = go; (Bool_match is_valid {List_cons (Fib_pos_new _9 _7) _4} _5))
}

// Bool.match (x: (Bool)) -(p: (x: (Bool)) Type) (true: (p (Bool.true))) (false: (p (Bool.false))) : (p x)
fun (Bool_match x true false) {
  (Bool_match {Bool_true} true ~) =
    true
  (Bool_match {Bool_false} ~ false) =
    false
}

// Bool.and (a: (Bool)) (b: (Bool)) : (Bool)
fun (Bool_and a b) {
  (Bool_and {Bool_true} b) =
    b
  (Bool_and {Bool_false} ~) =
    {Bool_false}
}

// List.match -(t: Type) (x: (List t)) -(p: (x: (List t)) Type) (nil: (p (List.nil t))) (cons: (head: t) (tail: (List t)) (p (List.cons t head tail))) : (p x)
fun (List_match x nil cons) {
  (List_match {List_nil} nil ~) =
    nil
  (List_match {List_cons head_ tail_} ~ cons) =
    (!(!cons head_) tail_)
}

// Apps.Fib.Pos.Delta.get_from_data (data: (U120)) : (Pair (U120) (U120))
fun (Fib_pos_g_xy data) {
  (Fib_pos_g_xy data) =
    dup _0 _1 = data; let dx = (& _0 #15);
    let dy = (>> _1 #4);
    let func = @n dup _2 _3 = n; dup _4 _5 = _2; (Bool_if (U120_equal (/ _3 #8) #1) (- #0 (% _4 #8)) (% _5 #8));
    dup _6 _7 = func; {T2 (!_6 dx) (!_7 dy)}
}

// Apps.Fib.State.apply_skill (state: (Apps.Fib.State)) (skill: (U120)) (entity: (U120)) (target: (Apps.Fib.Pos)) : (Apps.Fib.State)
fun (Fib_st_appsk state skill entity target) {
  (Fib_st_appsk state #0 ~ ~) =
    state
  (Fib_st_appsk state #1 ~ ~) =
    state
  (Fib_st_appsk state #2 ~ ~) =
    state
  (Fib_st_appsk state #3 ~ ~) =
    state
  (Fib_st_appsk state #4 ~ ~) =
    state
}

// Apps.Fib.State.walk (state: (Apps.Fib.State)) (data: (U120)) (entity: (Apps.Fib.Entity)) (id: (Apps.Fib.Id)) : (Apps.Fib.State)
fun (Fib_st_walk state data entity id) {
  (Fib_st_walk {Fib_st_new map table} data ~ id) =
    dup _4 _5 = data; dup _6 _7 = _4; dup _2 _3 = table; dup _0 _1 = map; let max_move = #2;
    let dx = (& _5 #15);
    let dy = (>> _6 #4);
    let real_change = @x (% x #8);
    dup _10 _11 = real_change; let gtn = (U120_gte max_move (+ (!_10 dx) (!_11 dy)));
    let delta_xy = (Fib_pos_g_xy _7);
    dup _8 _9 = delta_xy; let dx = (Pair_fst _8);
    let dy = (Pair_snd _9);
    (Bool_if gtn (Fib_st_move id dx dy {Fib_st_new _0 _2}) {Fib_st_new _1 _3})
}

// Apps.Fib.State.move (entity_id: (Apps.Fib.Id)) (dx: (U120)) (dy: (U120)) (state: (Apps.Fib.State)) : (Apps.Fib.State)
fun (Fib_st_move entity_id dx dy state) {
  (Fib_st_move entity_id dx dy {Fib_st_new map table}) =
    dup _2 _3 = table; dup _4 _5 = _2; dup _0 _1 = map; let tab_ent = (Fib_tbl_got _3 entity_id);
    let player = (Pair_snd tab_ent);
    dup _8 _9 = player; let x = (Fib_plr_p_gx _8);
    let y = (Fib_plr_p_gy _9);
    let origin_pos = (Fib_pos_new x y);
    dup _6 _7 = origin_pos; let modify = (Fib_pos_mod _6 {T2 dx dy});
    (Maybe_match modify {Fib_st_new _0 _4} @modify.value (Fib_st_pmov {Fib_st_new _1 _5} _7 modify.value))
}

// Apps.Fib.State.player.move (state: (Apps.Fib.State)) (ori: (Apps.Fib.Pos)) (des: (Apps.Fib.Pos)) : (Apps.Fib.State)
fun (Fib_st_pmov state ori des) {
  (Fib_st_pmov {Fib_st_new map table} ori des) =
    dup _10 _11 = ori; dup _6 _7 = des; dup _8 _9 = _6; dup _4 _5 = table; dup _0 _1 = map; dup _2 _3 = _0; let des_map_id = (Fib_map_got _1 _7);
    let emp_des = (Fib_map_tlem (Pair_snd des_map_id));
    let ori_map_id = (Fib_map_got _2 _10);
    dup _12 _13 = ori_map_id; dup _14 _15 = _12; dup _16 _17 = _13; let tbl_ent_ori = (Fib_tbl_got _4 (Pair_snd _14));
    (Bool_if emp_des let new_player = @player (Fib_plr_p_c player @~ (Sigma_fst _8));
    let new_table = (Fib_tbl_mut (Pair_fst tbl_ent_ori) new_player (Pair_snd _15));
    let new_map = (Fib_map_del (Pair_fst _16) _11);
    let new_map = (Fib_map_set new_map (Pair_snd _17) _9);
    {Fib_st_new new_map new_table} {Fib_st_new _3 _5})
}

// Apps.Fib.Map.del (map: (Apps.Fib.Map)) (pos: (Apps.Fib.Pos)) : (Apps.Fib.Map)
fun (Fib_map_del map pos) {
  (Fib_map_del map pos) =
    (Fib_map_set map #0 pos)
}

// Apps.Fib.Map.tile_is_empty (tile: (U120)) : (Bool)
fun (Fib_map_tlem tile) {
  (Fib_map_tlem tile) =
    (U120_is0 tile)
}

// Apps.Fib.State.Update.interact (state: (Apps.Fib.State)) (data: (U120)) (player_id: (Apps.Fib.Id)) (player: (Apps.Fib.Entity)) (frame: (U120)) : (Apps.Fib.State)
fun (Fib_st_updit state data player_id player frame) {
  (Fib_st_updit state data player_id player frame) =
    dup _4 _5 = state; dup _6 _7 = _4; dup _8 _9 = _5; dup _2 _3 = data; dup _0 _1 = player; let map = (Apps_Fib_N4l _6);
    let pos = (Fib_pos_new (Fib_plr_p_gx _0) (Fib_plr_p_gy _1));
    let delta = (Apps_Fib_5eI _2);
    let data = (Apps_Fib_vVa _3);
    (Maybe_match (Fib_pos_mod pos delta) _7 @target.value dup _10 _11 = target.value; let npc = (Fib_map_get map _10);
    let int = (Apps_Fib_f1y npc data);
    let result = (!(!(!(!int _8) player_id) _11) frame);
    (Apps_Fib__hV result @~ @result.state @~ @~ @~ @~ result.state _9))
}

// Apps.Fib.Interaction.get_data (data: (U120)) : (U120)
fun (Apps_Fib_vVa data) {
  (Apps_Fib_vVa ~) =
    (& #252 #3)
}

// Apps.Fib.State.get_map (state: (Apps.Fib.State)) : (Apps.Fib.Map)
fun (Apps_Fib_N4l state) {
  (Apps_Fib_N4l {Fib_st_new map ~}) =
    map
}

// Apps.Fib.Interaction.Result.match -(a: Type) (x: (Apps.Fib.Interaction.Result a)) -(p: (x: (Apps.Fib.Interaction.Result a)) Type) (new: (val: a) (state: (Apps.Fib.State)) (player: (Apps.Fib.Id)) (target: (Apps.Fib.Pos)) (frame: (U120)) (events: (List (Apps.Fib.Event))) (p (Apps.Fib.Interaction.Result.new a val state player target frame events))) (err: (p (Apps.Fib.Interaction.Result.err a))) : (p x)
fun (Apps_Fib__hV x new err) {
  (Apps_Fib__hV {Apps_Fib_ztZ val_ state_ player_ target_ frame_ events_} new ~) =
    (!(!(!(!(!(!new val_) state_) player_) target_) frame_) events_)
  (Apps_Fib__hV {Apps_Fib_ykh} ~ err) =
    err
}

// Apps.Fib.Interaction.Result.new -(a: Type) (val: a) (state: (Apps.Fib.State)) (player: (Apps.Fib.Id)) (target: (Apps.Fib.Pos)) (frame: (U120)) (events: (List (Apps.Fib.Event))) : (Apps.Fib.Interaction.Result a)
ctr {Apps_Fib_ztZ val state player target frame events}

// Apps.Fib.Interaction.Result.err -(a: Type) : (Apps.Fib.Interaction.Result a)
ctr {Apps_Fib_ykh}

// Apps.Fib.Interaction.get_direction (data: (U120)) : (Pair (U120) (U120))
fun (Apps_Fib_5eI data) {
  (Apps_Fib_5eI data) =
    (Apps_Fib_8pH (& data #3))
}

// Apps.Fib.Interaction.get_direction.aux (val: (U120)) : (Pair (U120) (U120))
fun (Apps_Fib_8pH val) {
  (Apps_Fib_8pH #0) =
    {T2 #0 #1329227995784915872903807060280344575}
  (Apps_Fib_8pH #1) =
    {T2 #1329227995784915872903807060280344575 #0}
  (Apps_Fib_8pH #2) =
    {T2 #0 #1}
  (Apps_Fib_8pH #0) =
    {T2 #1 #0}
  (Apps_Fib_8pH ~) =
    {T2 #0 #0}
}

// Apps.Fib.Map.get (map: (Apps.Fib.Map)) (pos: (Apps.Fib.Pos)) : (Apps.Fib.Id)
fun (Fib_map_get map pos) {
  (Fib_map_get map pos) =
    let keys = (Fib_map_getc map pos);
    (Pair_match keys @keys.fst @keys.snd (Fib_map_gtil keys.fst keys.snd))
}

// Apps.Fib.Map.get.chunk (map: (Apps.Fib.Map)) (pos: (Apps.Fib.Pos)) : (Pair (U120) (U120))
fun (Fib_map_getc map pos) {
  (Fib_map_getc map pos) =
    let keys = (Fib_map_kfps pos);
    dup _0 _1 = keys; let chunk = (Bt_get (Fib_map_base) (Pair_fst _0) map);
    let idx = (Pair_snd _1);
    {T2 chunk idx}
}

// Data.BaseTree.get -(val: Type) (bases: (List (Data.BaseTree.Base))) (key: (Data.BaseTree.Key bases)) (map: (Data.BaseTree bases val)) : val
fun (Bt_get bases key map) {
  (Bt_get {List_cons h t} key map) =
    (Bt_get0 h t key map)
}

// Data.BaseTree.get.aux -(val: Type) (head: (Data.BaseTree.Base)) (tail: (List (Data.BaseTree.Base))) (key: (Data.BaseTree.Key (List.cons _ head tail))) (map: (Data.BaseTree (List.cons _ head tail) val)) : val
fun (Bt_get0 head tail key map) {
  (Bt_get0 {Bt_base2} {List_nil} {Bt_base_b0 ~} {Bt_bin_tie b0 ~}) =
    b0
  (Bt_get0 {Bt_base2} {List_nil} {Bt_base_b1 ~} {Bt_bin_tie ~ b1}) =
    b1
  (Bt_get0 {Bt_base5} {List_nil} {Bt_base_q0 ~} {Bt_qui_tie b0 ~ ~ ~ ~}) =
    b0
  (Bt_get0 {Bt_base5} {List_nil} {Bt_base_q1 ~} {Bt_qui_tie ~ b1 ~ ~ ~}) =
    b1
  (Bt_get0 {Bt_base5} {List_nil} {Bt_base_q2 ~} {Bt_qui_tie ~ ~ b2 ~ ~}) =
    b2
  (Bt_get0 {Bt_base5} {List_nil} {Bt_base_q3 ~} {Bt_qui_tie ~ ~ ~ b3 ~}) =
    b3
  (Bt_get0 {Bt_base5} {List_nil} {Bt_base_q4 ~} {Bt_qui_tie ~ ~ ~ ~ b4}) =
    b4
  (Bt_get0 {Bt_base2} {List_cons h c} {Bt_base_b0 y} {Bt_bin_tie b0 ~}) =
    (Bt_get0 h c y b0)
  (Bt_get0 {Bt_base2} {List_cons h c} {Bt_base_b1 y} {Bt_bin_tie ~ b1}) =
    (Bt_get0 h c y b1)
  (Bt_get0 {Bt_base5} {List_cons h c} {Bt_base_q0 y} {Bt_qui_tie b0 ~ ~ ~ ~}) =
    (Bt_get0 h c y b0)
  (Bt_get0 {Bt_base5} {List_cons h c} {Bt_base_q1 y} {Bt_qui_tie ~ b1 ~ ~ ~}) =
    (Bt_get0 h c y b1)
  (Bt_get0 {Bt_base5} {List_cons h c} {Bt_base_q2 y} {Bt_qui_tie ~ ~ b2 ~ ~}) =
    (Bt_get0 h c y b2)
  (Bt_get0 {Bt_base5} {List_cons h c} {Bt_base_q3 y} {Bt_qui_tie ~ ~ ~ b3 ~}) =
    (Bt_get0 h c y b3)
  (Bt_get0 {Bt_base5} {List_cons h c} {Bt_base_q4 y} {Bt_qui_tie ~ ~ ~ ~ b4}) =
    (Bt_get0 h c y b4)
}

// Apps.Fib.Interaction.get_npc (id: (U120)) (data: (U120)) : (Apps.Fib.Interaction (Unit))
fun (Apps_Fib_f1y id data) {
  (Apps_Fib_f1y #128 ~) =
    let spawn_points = {List_cons (Fib_pos_new #26 #154) {List_cons (Fib_pos_new #26 #155) {List_cons (Fib_pos_new #25 #153) {List_nil}}}};
    let hp = #100;
    let bat_id = #512;
    (Apps_Fib_6Kv hp spawn_points bat_id)
  (Apps_Fib_f1y #129 ~) =
    let spawn_points = {List_cons (Fib_pos_new #36 #132) {List_cons (Fib_pos_new #36 #133) {List_cons (Fib_pos_new #37 #131) {List_nil}}}};
    let hp = #100;
    let bat_id = #513;
    (Apps_Fib_6Kv hp spawn_points bat_id)
  (Apps_Fib_f1y #130 ~) =
    let spawn_points = {List_cons (Fib_pos_new #49 #136) {List_cons (Fib_pos_new #50 #137) {List_cons (Fib_pos_new #51 #138) {List_nil}}}};
    let hp = #100;
    let bat_id = #514;
    (Apps_Fib_6Kv hp spawn_points bat_id)
}

// Apps.Fib.Npc.bat_cave (hp: (U120)) (spawn_points: (List (Apps.Fib.Pos))) (bat_id: (Apps.Fib.Id)) : (Apps.Fib.Interaction (Unit))
fun (Apps_Fib_6Kv hp spawn_points bat_id) {
  (Apps_Fib_6Kv hp spawn_points bat_id) =
    (Apps_Fib_si1 (Apps_Fib_Pij) @entity (Apps_Fib_si1 (Apps_Fib_E6O) @~ (Apps_Fib_si1 (Apps_Fib_UNH) @map (Apps_Fib_si1 (Apps_Fib_T20 entity) @~ let pos = (Apps_Fib_uOI spawn_points map);
    (Maybe_match pos (Apps_Fib_5tt) @pos.value dup _0 _1 = pos.value; let bat = (+ (Sigma_fst _0) (<< hp #16));
    let func = @state (Fib_st_crtu state bat _1 bat_id);
    (Apps_Fib_si1 (Apps_Fib_mdK func) @~ (Apps_Fib_si1 (Apps_Fib_6iq #4095) @~ (Apps_Fib_82m {T0}))))))))
}

// Apps.Fib.Interaction.bind -(a: Type) -(b: Type) (itr: (Apps.Fib.Interaction a)) (next: (_: a) (Apps.Fib.Interaction b)) : (Apps.Fib.Interaction b)
fun (Apps_Fib_si1 itr next) {
  (Apps_Fib_si1 itr next) =
    @state @player @target @frame let r_a = (!(!(!(!itr state) player) target) frame);
    (Apps_Fib__hV r_a @r_a.val @r_a.state @r_a.player @r_a.target @r_a.frame @r_a.events let r_b = (!(!(!(!(!next r_a.val) r_a.state) r_a.player) r_a.target) r_a.frame);
    (Apps_Fib__hV r_b @r_b.val @r_b.state @r_b.player @r_b.target @r_b.frame @r_b.events let events = (List_concat r_a.events r_b.events);
    let result = {Apps_Fib_ztZ r_b.val r_b.state r_b.player r_b.target r_b.frame events};
    result {Apps_Fib_ykh}) {Apps_Fib_ykh})
}

// List.concat -(a: Type) (xs: (List a)) (ys: (List a)) : (List a)
fun (List_concat xs ys) {
  (List_concat {List_nil} ys) =
    ys
  (List_concat {List_cons head tail} ys) =
    {List_cons head (List_concat tail ys)}
}

// Apps.Fib.Interaction.entity.set_at_target_id (new_entity: (Apps.Fib.Entity)) : (Apps.Fib.Interaction (Unit))
fun (Apps_Fib_6iq new_entity) {
  (Apps_Fib_6iq new_entity) =
    (Apps_Fib_si1 (Apps_Fib_Pij) @entity let func = @table (Fib_tbl_set table new_entity entity);
    (Apps_Fib_si1 (Apps_Fib_OTf func) @~ (Apps_Fib_82m {T0})))
}

// Apps.Fib.Interaction.table.mut (func: (_: (Apps.Fib.Table)) (Apps.Fib.Table)) : (Apps.Fib.Interaction (Unit))
fun (Apps_Fib_OTf func) {
  (Apps_Fib_OTf func) =
    @state dup _0 _1 = state; @player @target @frame let table = (Apps_Fib_zsK _0);
    let map = (Apps_Fib_N4l _1);
    let state = {Fib_st_new map (!func table)};
    {Apps_Fib_ztZ {T0} state player target frame {List_nil}}
}

// Apps.Fib.Interaction.pure -(a: Type) (x: a) : (Apps.Fib.Interaction _)
fun (Apps_Fib_82m x) {
  (Apps_Fib_82m x) =
    @state @player @target @frame {Apps_Fib_ztZ x state player target frame {List_nil}}
}

// Apps.Fib.Interaction.entity.get : (Apps.Fib.Interaction (Apps.Fib.Player))
fun (Apps_Fib_Pij) {
  (Apps_Fib_Pij) =
    (Apps_Fib_si1 (Apps_Fib_MnN) @id (Apps_Fib_si1 (Apps_Fib_YWC) @table let entity = (Fib_tbl_get table id);
    (Apps_Fib_82m entity)))
}

// Apps.Fib.Interaction.table.get : (Apps.Fib.Interaction (Apps.Fib.Table))
fun (Apps_Fib_YWC) {
  (Apps_Fib_YWC) =
    @state dup _0 _1 = state; @player @target @frame {Apps_Fib_ztZ (Apps_Fib_zsK _0) _1 player target frame {List_nil}}
}

// Apps.Fib.Interaction.entity.get_id : (Apps.Fib.Interaction (Apps.Fib.Id))
fun (Apps_Fib_MnN) {
  (Apps_Fib_MnN) =
    (Apps_Fib_si1 (Apps_Fib_UNH) @map (Apps_Fib_si1 (Apps_Fib_yD8) @pos let id = (Fib_map_get map pos);
    (Apps_Fib_82m id)))
}

// Apps.Fib.Interaction.target.get : (Apps.Fib.Interaction (Apps.Fib.Pos))
fun (Apps_Fib_yD8) {
  (Apps_Fib_yD8) =
    @state @player @target dup _0 _1 = target; @frame {Apps_Fib_ztZ _0 state player _1 frame {List_nil}}
}

// Apps.Fib.Interaction.map.get : (Apps.Fib.Interaction (Apps.Fib.Map))
fun (Apps_Fib_UNH) {
  (Apps_Fib_UNH) =
    @state dup _0 _1 = state; @player @target @frame {Apps_Fib_ztZ (Apps_Fib_N4l _0) _1 player target frame {List_nil}}
}

// Apps.Fib.Table.get (map: (Apps.Fib.Table)) (id: (Apps.Fib.Id)) : (Apps.Fib.Entity)
fun (Fib_tbl_get map id) {
  (Fib_tbl_get map id) =
    (Bt_get (Fib_tbl_bses) (Fib_tbl_fid id) map)
}

// Apps.Fib.Interaction.frame.check_cd (cd: (U120)) : (Apps.Fib.Interaction (Unit))
fun (Apps_Fib_T20 cd) {
  (Apps_Fib_T20 cd) =
    (Apps_Fib_si1 (Apps_Fib_GGy) @frame let is_ready = (U120_lte cd frame);
    (Apps_Fib_si1 (Apps_Fib_Y8C is_ready) @~ (Apps_Fib_82m {T0})))
}

// Apps.Fib.Interaction.frame.get : (Apps.Fib.Interaction (U120))
fun (Apps_Fib_GGy) {
  (Apps_Fib_GGy) =
    @state @player @target @frame dup _0 _1 = frame; {Apps_Fib_ztZ _0 state player target _1 {List_nil}}
}

// Apps.Fib.Interaction.check (bool: (Bool)) : (Apps.Fib.Interaction (Unit))
fun (Apps_Fib_Y8C bool) {
  (Apps_Fib_Y8C {Bool_true}) =
    (Apps_Fib_82m {T0})
  (Apps_Fib_Y8C {Bool_false}) =
    (Apps_Fib_5tt)
}

// Apps.Fib.Interaction.fail : (Apps.Fib.Interaction (Unit))
fun (Apps_Fib_5tt) {
  (Apps_Fib_5tt) =
    @~ @~ @~ @~ {Apps_Fib_ykh}
}

// Apps.Fib.Interaction.player.get : (Apps.Fib.Interaction (Apps.Fib.Player))
fun (Apps_Fib_E6O) {
  (Apps_Fib_E6O) =
    (Apps_Fib_si1 (Apps_Fib_Pu1) @id (Apps_Fib_si1 (Apps_Fib_YWC) @table let player = (Fib_tbl_get table id);
    (Apps_Fib_82m player)))
}

// Apps.Fib.Interaction.player.get_id : (Apps.Fib.Interaction (Apps.Fib.Id))
fun (Apps_Fib_Pu1) {
  (Apps_Fib_Pu1) =
    @state @player dup _0 _1 = player; @target @frame {Apps_Fib_ztZ _0 state _1 target frame {List_nil}}
}

// Apps.Fib.Interaction.state.mut (func: (_: (Apps.Fib.State)) (Apps.Fib.State)) : (Apps.Fib.Interaction (Unit))
fun (Apps_Fib_mdK func) {
  (Apps_Fib_mdK func) =
    @state @player @target @frame {Apps_Fib_ztZ {T0} (!func state) player target frame {List_nil}}
}

// Apps.Fib.Npc.bat_cave.find_pos (list: (List (Apps.Fib.Pos))) (map: (Apps.Fib.Map)) : (Maybe (Apps.Fib.Pos))
fun (Apps_Fib_uOI list map) {
  (Apps_Fib_uOI {List_nil} ~) =
    {Maybe_none}
  (Apps_Fib_uOI {List_cons h t} map) =
    dup _2 _3 = h; dup _0 _1 = map; let val = (Fib_map_get _0 _2);
    (Bool_if (U120_is0 val) {Maybe_some _3} (Apps_Fib_uOI t _1))
}

// Apps.Fib.Action.get_comm (action: (U120)) : (U120)
fun (Fib_ac_gcomm action) {
  (Fib_ac_gcomm action) =
    (Fib_g_u120 action #12 #4)
}

// Apps.Fib.Action.get_id (action: (U120)) : (U120)
fun (Fib_ac_gid action) {
  (Fib_ac_gid action) =
    (Fib_g_u120 action #0 #12)
}

// Apps.Fib.State.create_player (state: (Apps.Fib.State)) (id: (Apps.Fib.Id)) (data: (U120)) : (Apps.Fib.State)
fun (Fib_st_crtp state id data) {
  (Fib_st_crtp {Fib_st_new map tab} id data) =
    let s_pos = (Fib_st_crtpc (% data #4));
    let new_player = (Pair_match s_pos @s_pos.fst @s_pos.snd (Fib_plr_dflt s_pos.fst s_pos.snd));
    (Fib_st_pplc {Fib_st_new map tab} new_player id)
}

// Apps.Fib.State.create_player.city (data: (U120)) : (Pair (U120) (U120))
fun (Fib_st_crtpc data) {
  (Fib_st_crtpc #0) =
    {T2 #12 #12}
  (Fib_st_crtpc #1) =
    {T2 #147 #12}
  (Fib_st_crtpc #2) =
    {T2 #147 #147}
  (Fib_st_crtpc #3) =
    {T2 #12 #147}
}

// Apps.Fib.Player.default (x: (U120)) (y: (U120)) : (Apps.Fib.Player)
fun (Fib_plr_dflt x y) {
  (Fib_plr_dflt x y) =
    let xp = #0;
    let hp = #100;
    let gd = #50;
    let cd = #0;
    let rt = #0;
    let sl = #0;
    let skills = {List_cons #1 {List_nil}};
    (Fib_plr_new x y xp hp rt sl gd cd skills)
}

// Apps.Fib.Action.get_data (action: (U120)) : (U120)
fun (Fib_ac_gdata action) {
  (Fib_ac_gdata action) =
    (Fib_g_u120 action #16 #8)
}
